
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000032a4  00003318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002c70  00000000  00000000  00003338  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000150d  00000000  00000000  00005fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000074b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000075f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00007765  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000093ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000a299  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000b048  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000b1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000b435  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bc03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 1e 14 	call	0x283c	; 0x283c <main>
      7a:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e7       	ldi	r26, 0x76	; 118
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 35 19 	jmp	0x326a	; 0x326a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e7       	ldi	r24, 0x76	; 118
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 35 19 	jmp	0x326a	; 0x326a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 45 19 	jmp	0x328a	; 0x328a <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <Calculator_Run>:
#include "LCD.h"
#include "Calculator.h"

//u8 Calculator_GetRealNumber (Keypad_ButtonType button);

void Calculator_Run(void) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2d 97       	sbiw	r28, 0x0d	; 13
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
    s8 num1=0, num2=0, operation=0, result=0;
     b4a:	19 86       	std	Y+9, r1	; 0x09
     b4c:	18 86       	std	Y+8, r1	; 0x08
     b4e:	1f 82       	std	Y+7, r1	; 0x07
     b50:	1e 82       	std	Y+6, r1	; 0x06
    u8 num1_flag=0, num2_flag=0, operation_flag=0, result_flag=0;
     b52:	1d 82       	std	Y+5, r1	; 0x05
     b54:	1c 82       	std	Y+4, r1	; 0x04
     b56:	1b 82       	std	Y+3, r1	; 0x03
     b58:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button;
    while (1)
    {
        /* Wait for user input */
        do {
            pressed_button = Keypad_GetPressedButton();
     b5a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <Keypad_GetPressedButton>
     b5e:	89 83       	std	Y+1, r24	; 0x01
        }
        while (pressed_button == KEYPAD_BUTTON_INVALID);
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	80 31       	cpi	r24, 0x10	; 16
     b64:	d1 f3       	breq	.-12     	; 0xb5a <Calculator_Run+0x24>

        if (pressed_button == CALCULATOR_BUTTON_CLR) {
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	88 23       	and	r24, r24
     b6a:	39 f4       	brne	.+14     	; 0xb7a <Calculator_Run+0x44>
            num1_flag = 0;
     b6c:	1d 82       	std	Y+5, r1	; 0x05
            num2_flag = 0;
     b6e:	1c 82       	std	Y+4, r1	; 0x04
            operation_flag = 0;
     b70:	1b 82       	std	Y+3, r1	; 0x03
            result_flag = 0;
     b72:	1a 82       	std	Y+2, r1	; 0x02
            LCD_Clear();
     b74:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <LCD_Clear>
     b78:	f0 cf       	rjmp	.-32     	; 0xb5a <Calculator_Run+0x24>
            continue;
        }
        if (num1_flag == 0) {
     b7a:	8d 81       	ldd	r24, Y+5	; 0x05
     b7c:	88 23       	and	r24, r24
     b7e:	61 f4       	brne	.+24     	; 0xb98 <Calculator_Run+0x62>
            num1_flag = 1;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	8d 83       	std	Y+5, r24	; 0x05
            num1 = Calculator_GetRealNumber(pressed_button);
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Calculator_GetRealNumber>
     b8a:	89 87       	std	Y+9, r24	; 0x09
            LCD_DisplayNumber(num1);
     b8c:	89 85       	ldd	r24, Y+9	; 0x09
     b8e:	88 2f       	mov	r24, r24
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <LCD_DisplayNumber>
     b96:	e1 cf       	rjmp	.-62     	; 0xb5a <Calculator_Run+0x24>
        }
        else if (operation_flag == 0) {
     b98:	8b 81       	ldd	r24, Y+3	; 0x03
     b9a:	88 23       	and	r24, r24
     b9c:	89 f5       	brne	.+98     	; 0xc00 <Calculator_Run+0xca>
            operation_flag = 1;
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	8b 83       	std	Y+3, r24	; 0x03
            switch (pressed_button)
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	28 2f       	mov	r18, r24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	3d 87       	std	Y+13, r19	; 0x0d
     baa:	2c 87       	std	Y+12, r18	; 0x0c
     bac:	8c 85       	ldd	r24, Y+12	; 0x0c
     bae:	9d 85       	ldd	r25, Y+13	; 0x0d
     bb0:	87 30       	cpi	r24, 0x07	; 7
     bb2:	91 05       	cpc	r25, r1
     bb4:	c9 f0       	breq	.+50     	; 0xbe8 <Calculator_Run+0xb2>
     bb6:	2c 85       	ldd	r18, Y+12	; 0x0c
     bb8:	3d 85       	ldd	r19, Y+13	; 0x0d
     bba:	28 30       	cpi	r18, 0x08	; 8
     bbc:	31 05       	cpc	r19, r1
     bbe:	34 f4       	brge	.+12     	; 0xbcc <Calculator_Run+0x96>
     bc0:	8c 85       	ldd	r24, Y+12	; 0x0c
     bc2:	9d 85       	ldd	r25, Y+13	; 0x0d
     bc4:	83 30       	cpi	r24, 0x03	; 3
     bc6:	91 05       	cpc	r25, r1
     bc8:	61 f0       	breq	.+24     	; 0xbe2 <Calculator_Run+0xac>
     bca:	16 c0       	rjmp	.+44     	; 0xbf8 <Calculator_Run+0xc2>
     bcc:	2c 85       	ldd	r18, Y+12	; 0x0c
     bce:	3d 85       	ldd	r19, Y+13	; 0x0d
     bd0:	2b 30       	cpi	r18, 0x0B	; 11
     bd2:	31 05       	cpc	r19, r1
     bd4:	61 f0       	breq	.+24     	; 0xbee <Calculator_Run+0xb8>
     bd6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bd8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bda:	8f 30       	cpi	r24, 0x0F	; 15
     bdc:	91 05       	cpc	r25, r1
     bde:	51 f0       	breq	.+20     	; 0xbf4 <Calculator_Run+0xbe>
     be0:	0b c0       	rjmp	.+22     	; 0xbf8 <Calculator_Run+0xc2>
            {
            case CALCULATOR_BUTTON_PLUS:
                operation = '+';
     be2:	8b e2       	ldi	r24, 0x2B	; 43
     be4:	8f 83       	std	Y+7, r24	; 0x07
     be6:	08 c0       	rjmp	.+16     	; 0xbf8 <Calculator_Run+0xc2>
                break;
            case CALCULATOR_BUTTON_MINUS:
                operation = '-';
     be8:	8d e2       	ldi	r24, 0x2D	; 45
     bea:	8f 83       	std	Y+7, r24	; 0x07
     bec:	05 c0       	rjmp	.+10     	; 0xbf8 <Calculator_Run+0xc2>
                break;
            case CALCULATOR_BUTTON_MUL:
                operation = '*';
     bee:	8a e2       	ldi	r24, 0x2A	; 42
     bf0:	8f 83       	std	Y+7, r24	; 0x07
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <Calculator_Run+0xc2>
                break;
            case CALCULATOR_BUTTON_DIV:
                operation = '/';
     bf4:	8f e2       	ldi	r24, 0x2F	; 47
     bf6:	8f 83       	std	Y+7, r24	; 0x07
                break;
            default:
                break;
            }
            LCD_DisplayCharacter(operation);
     bf8:	8f 81       	ldd	r24, Y+7	; 0x07
     bfa:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <LCD_DisplayCharacter>
     bfe:	ad cf       	rjmp	.-166    	; 0xb5a <Calculator_Run+0x24>
        }
        else if (num2_flag == 0) {
     c00:	8c 81       	ldd	r24, Y+4	; 0x04
     c02:	88 23       	and	r24, r24
     c04:	61 f4       	brne	.+24     	; 0xc1e <Calculator_Run+0xe8>
            num2_flag = 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	8c 83       	std	Y+4, r24	; 0x04
            num2 = Calculator_GetRealNumber(pressed_button);
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Calculator_GetRealNumber>
     c10:	88 87       	std	Y+8, r24	; 0x08
            LCD_DisplayNumber(num2);
     c12:	88 85       	ldd	r24, Y+8	; 0x08
     c14:	88 2f       	mov	r24, r24
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <LCD_DisplayNumber>
     c1c:	9e cf       	rjmp	.-196    	; 0xb5a <Calculator_Run+0x24>
        }
        else if (result_flag == 0) {
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	88 23       	and	r24, r24
     c22:	09 f0       	breq	.+2      	; 0xc26 <Calculator_Run+0xf0>
     c24:	9a cf       	rjmp	.-204    	; 0xb5a <Calculator_Run+0x24>
            if (pressed_button == CALCULATOR_BUTTON_EQUAL) {
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	82 30       	cpi	r24, 0x02	; 2
     c2a:	09 f0       	breq	.+2      	; 0xc2e <Calculator_Run+0xf8>
     c2c:	96 cf       	rjmp	.-212    	; 0xb5a <Calculator_Run+0x24>
                result_flag = 1;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	8a 83       	std	Y+2, r24	; 0x02
                switch (operation)
     c32:	8f 81       	ldd	r24, Y+7	; 0x07
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	3b 87       	std	Y+11, r19	; 0x0b
     c3a:	2a 87       	std	Y+10, r18	; 0x0a
     c3c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c3e:	9b 85       	ldd	r25, Y+11	; 0x0b
     c40:	8b 32       	cpi	r24, 0x2B	; 43
     c42:	91 05       	cpc	r25, r1
     c44:	b1 f0       	breq	.+44     	; 0xc72 <Calculator_Run+0x13c>
     c46:	2a 85       	ldd	r18, Y+10	; 0x0a
     c48:	3b 85       	ldd	r19, Y+11	; 0x0b
     c4a:	2c 32       	cpi	r18, 0x2C	; 44
     c4c:	31 05       	cpc	r19, r1
     c4e:	34 f4       	brge	.+12     	; 0xc5c <Calculator_Run+0x126>
     c50:	8a 85       	ldd	r24, Y+10	; 0x0a
     c52:	9b 85       	ldd	r25, Y+11	; 0x0b
     c54:	8a 32       	cpi	r24, 0x2A	; 42
     c56:	91 05       	cpc	r25, r1
     c58:	b1 f0       	breq	.+44     	; 0xc86 <Calculator_Run+0x150>
     c5a:	22 c0       	rjmp	.+68     	; 0xca0 <Calculator_Run+0x16a>
     c5c:	2a 85       	ldd	r18, Y+10	; 0x0a
     c5e:	3b 85       	ldd	r19, Y+11	; 0x0b
     c60:	2d 32       	cpi	r18, 0x2D	; 45
     c62:	31 05       	cpc	r19, r1
     c64:	59 f0       	breq	.+22     	; 0xc7c <Calculator_Run+0x146>
     c66:	8a 85       	ldd	r24, Y+10	; 0x0a
     c68:	9b 85       	ldd	r25, Y+11	; 0x0b
     c6a:	8f 32       	cpi	r24, 0x2F	; 47
     c6c:	91 05       	cpc	r25, r1
     c6e:	91 f0       	breq	.+36     	; 0xc94 <Calculator_Run+0x15e>
     c70:	17 c0       	rjmp	.+46     	; 0xca0 <Calculator_Run+0x16a>
                {
                case '+':
                    result = num1 + num2;
     c72:	89 85       	ldd	r24, Y+9	; 0x09
     c74:	98 85       	ldd	r25, Y+8	; 0x08
     c76:	89 0f       	add	r24, r25
     c78:	8e 83       	std	Y+6, r24	; 0x06
     c7a:	12 c0       	rjmp	.+36     	; 0xca0 <Calculator_Run+0x16a>
                    break;
                case '-':
                    result = num1 - num2;
     c7c:	89 85       	ldd	r24, Y+9	; 0x09
     c7e:	98 85       	ldd	r25, Y+8	; 0x08
     c80:	89 1b       	sub	r24, r25
     c82:	8e 83       	std	Y+6, r24	; 0x06
     c84:	0d c0       	rjmp	.+26     	; 0xca0 <Calculator_Run+0x16a>
                    break;
                case '*':
                    result = num1 * num2;
     c86:	89 85       	ldd	r24, Y+9	; 0x09
     c88:	98 85       	ldd	r25, Y+8	; 0x08
     c8a:	89 9f       	mul	r24, r25
     c8c:	80 2d       	mov	r24, r0
     c8e:	11 24       	eor	r1, r1
     c90:	8e 83       	std	Y+6, r24	; 0x06
     c92:	06 c0       	rjmp	.+12     	; 0xca0 <Calculator_Run+0x16a>
                    break;
                case '/':
                    result = num1 / num2;
     c94:	89 85       	ldd	r24, Y+9	; 0x09
     c96:	98 85       	ldd	r25, Y+8	; 0x08
     c98:	69 2f       	mov	r22, r25
     c9a:	0e 94 e6 18 	call	0x31cc	; 0x31cc <__udivmodqi4>
     c9e:	8e 83       	std	Y+6, r24	; 0x06
                    break;
                default:
                    break;
                }
                LCD_DisplayCharacter('=');
     ca0:	8d e3       	ldi	r24, 0x3D	; 61
     ca2:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <LCD_DisplayCharacter>
                LCD_SetCursorPosition(1,0);
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <LCD_SetCursorPosition>
                LCD_DisplayString((u8*)"Result = ");
     cae:	80 e6       	ldi	r24, 0x60	; 96
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <LCD_DisplayString>
                LCD_DisplayNumber(result);
     cb6:	8e 81       	ldd	r24, Y+6	; 0x06
     cb8:	88 2f       	mov	r24, r24
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <LCD_DisplayNumber>
     cc0:	4c cf       	rjmp	.-360    	; 0xb5a <Calculator_Run+0x24>

00000cc2 <Calculator_GetRealNumber>:
            }
        }
    }
}

 u8 Calculator_GetRealNumber (Keypad_ButtonType button) {
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <Calculator_GetRealNumber+0x6>
     cc8:	00 d0       	rcall	.+0      	; 0xcca <Calculator_GetRealNumber+0x8>
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	8a 83       	std	Y+2, r24	; 0x02
    u8 num = 0;
     cd0:	19 82       	std	Y+1, r1	; 0x01
    switch (button)
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	3c 83       	std	Y+4, r19	; 0x04
     cda:	2b 83       	std	Y+3, r18	; 0x03
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	9c 81       	ldd	r25, Y+4	; 0x04
     ce0:	88 30       	cpi	r24, 0x08	; 8
     ce2:	91 05       	cpc	r25, r1
     ce4:	09 f4       	brne	.+2      	; 0xce8 <Calculator_GetRealNumber+0x26>
     ce6:	4b c0       	rjmp	.+150    	; 0xd7e <Calculator_GetRealNumber+0xbc>
     ce8:	2b 81       	ldd	r18, Y+3	; 0x03
     cea:	3c 81       	ldd	r19, Y+4	; 0x04
     cec:	29 30       	cpi	r18, 0x09	; 9
     cee:	31 05       	cpc	r19, r1
     cf0:	dc f4       	brge	.+54     	; 0xd28 <Calculator_GetRealNumber+0x66>
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	84 30       	cpi	r24, 0x04	; 4
     cf8:	91 05       	cpc	r25, r1
     cfa:	c1 f1       	breq	.+112    	; 0xd6c <Calculator_GetRealNumber+0xaa>
     cfc:	2b 81       	ldd	r18, Y+3	; 0x03
     cfe:	3c 81       	ldd	r19, Y+4	; 0x04
     d00:	25 30       	cpi	r18, 0x05	; 5
     d02:	31 05       	cpc	r19, r1
     d04:	34 f4       	brge	.+12     	; 0xd12 <Calculator_GetRealNumber+0x50>
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	91 05       	cpc	r25, r1
     d0e:	61 f1       	breq	.+88     	; 0xd68 <Calculator_GetRealNumber+0xa6>
     d10:	47 c0       	rjmp	.+142    	; 0xda0 <Calculator_GetRealNumber+0xde>
     d12:	2b 81       	ldd	r18, Y+3	; 0x03
     d14:	3c 81       	ldd	r19, Y+4	; 0x04
     d16:	25 30       	cpi	r18, 0x05	; 5
     d18:	31 05       	cpc	r19, r1
     d1a:	59 f1       	breq	.+86     	; 0xd72 <Calculator_GetRealNumber+0xb0>
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	86 30       	cpi	r24, 0x06	; 6
     d22:	91 05       	cpc	r25, r1
     d24:	49 f1       	breq	.+82     	; 0xd78 <Calculator_GetRealNumber+0xb6>
     d26:	3c c0       	rjmp	.+120    	; 0xda0 <Calculator_GetRealNumber+0xde>
     d28:	2b 81       	ldd	r18, Y+3	; 0x03
     d2a:	3c 81       	ldd	r19, Y+4	; 0x04
     d2c:	2c 30       	cpi	r18, 0x0C	; 12
     d2e:	31 05       	cpc	r19, r1
     d30:	79 f1       	breq	.+94     	; 0xd90 <Calculator_GetRealNumber+0xce>
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	9c 81       	ldd	r25, Y+4	; 0x04
     d36:	8d 30       	cpi	r24, 0x0D	; 13
     d38:	91 05       	cpc	r25, r1
     d3a:	5c f4       	brge	.+22     	; 0xd52 <Calculator_GetRealNumber+0x90>
     d3c:	2b 81       	ldd	r18, Y+3	; 0x03
     d3e:	3c 81       	ldd	r19, Y+4	; 0x04
     d40:	29 30       	cpi	r18, 0x09	; 9
     d42:	31 05       	cpc	r19, r1
     d44:	f9 f0       	breq	.+62     	; 0xd84 <Calculator_GetRealNumber+0xc2>
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	9c 81       	ldd	r25, Y+4	; 0x04
     d4a:	8a 30       	cpi	r24, 0x0A	; 10
     d4c:	91 05       	cpc	r25, r1
     d4e:	e9 f0       	breq	.+58     	; 0xd8a <Calculator_GetRealNumber+0xc8>
     d50:	27 c0       	rjmp	.+78     	; 0xda0 <Calculator_GetRealNumber+0xde>
     d52:	2b 81       	ldd	r18, Y+3	; 0x03
     d54:	3c 81       	ldd	r19, Y+4	; 0x04
     d56:	2d 30       	cpi	r18, 0x0D	; 13
     d58:	31 05       	cpc	r19, r1
     d5a:	e9 f0       	breq	.+58     	; 0xd96 <Calculator_GetRealNumber+0xd4>
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	9c 81       	ldd	r25, Y+4	; 0x04
     d60:	8e 30       	cpi	r24, 0x0E	; 14
     d62:	91 05       	cpc	r25, r1
     d64:	d9 f0       	breq	.+54     	; 0xd9c <Calculator_GetRealNumber+0xda>
     d66:	1c c0       	rjmp	.+56     	; 0xda0 <Calculator_GetRealNumber+0xde>
    {
    case CALCULATOR_BUTTON_NUM0:
        num = 0;
     d68:	19 82       	std	Y+1, r1	; 0x01
     d6a:	1a c0       	rjmp	.+52     	; 0xda0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM1:
        num = 1;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	17 c0       	rjmp	.+46     	; 0xda0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM2:
        num = 2;
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	89 83       	std	Y+1, r24	; 0x01
     d76:	14 c0       	rjmp	.+40     	; 0xda0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM3:
        num = 3;
     d78:	83 e0       	ldi	r24, 0x03	; 3
     d7a:	89 83       	std	Y+1, r24	; 0x01
     d7c:	11 c0       	rjmp	.+34     	; 0xda0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM4:
        num = 4;
     d7e:	84 e0       	ldi	r24, 0x04	; 4
     d80:	89 83       	std	Y+1, r24	; 0x01
     d82:	0e c0       	rjmp	.+28     	; 0xda0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM5:
        num = 5;
     d84:	85 e0       	ldi	r24, 0x05	; 5
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	0b c0       	rjmp	.+22     	; 0xda0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM6:
        num = 6;
     d8a:	86 e0       	ldi	r24, 0x06	; 6
     d8c:	89 83       	std	Y+1, r24	; 0x01
     d8e:	08 c0       	rjmp	.+16     	; 0xda0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM7:
        num = 7;
     d90:	87 e0       	ldi	r24, 0x07	; 7
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	05 c0       	rjmp	.+10     	; 0xda0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM8:
        num = 8;
     d96:	88 e0       	ldi	r24, 0x08	; 8
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <Calculator_GetRealNumber+0xde>
        break;
    case CALCULATOR_BUTTON_NUM9:
        num = 9;
     d9c:	89 e0       	ldi	r24, 0x09	; 9
     d9e:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return num;
     da0:	89 81       	ldd	r24, Y+1	; 0x01
}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <DIO_SetPinMode>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"

void DIO_SetPinMode(DIO_PortType port, DIO_PinType pin, DIO_ModeType mode) {
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	29 97       	sbiw	r28, 0x09	; 9
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	6a 83       	std	Y+2, r22	; 0x02
     dc8:	4b 83       	std	Y+3, r20	; 0x03
    if (mode == DIO_INPUT_FLOATING)
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	88 23       	and	r24, r24
     dce:	09 f0       	breq	.+2      	; 0xdd2 <DIO_SetPinMode+0x22>
     dd0:	c2 c0       	rjmp	.+388    	; 0xf56 <DIO_SetPinMode+0x1a6>
    {
        switch (port)
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	39 87       	std	Y+9, r19	; 0x09
     dda:	28 87       	std	Y+8, r18	; 0x08
     ddc:	88 85       	ldd	r24, Y+8	; 0x08
     dde:	99 85       	ldd	r25, Y+9	; 0x09
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	91 05       	cpc	r25, r1
     de4:	09 f4       	brne	.+2      	; 0xde8 <DIO_SetPinMode+0x38>
     de6:	3f c0       	rjmp	.+126    	; 0xe66 <DIO_SetPinMode+0xb6>
     de8:	28 85       	ldd	r18, Y+8	; 0x08
     dea:	39 85       	ldd	r19, Y+9	; 0x09
     dec:	22 30       	cpi	r18, 0x02	; 2
     dee:	31 05       	cpc	r19, r1
     df0:	2c f4       	brge	.+10     	; 0xdfc <DIO_SetPinMode+0x4c>
     df2:	88 85       	ldd	r24, Y+8	; 0x08
     df4:	99 85       	ldd	r25, Y+9	; 0x09
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	71 f0       	breq	.+28     	; 0xe16 <DIO_SetPinMode+0x66>
     dfa:	e1 c1       	rjmp	.+962    	; 0x11be <DIO_SetPinMode+0x40e>
     dfc:	28 85       	ldd	r18, Y+8	; 0x08
     dfe:	39 85       	ldd	r19, Y+9	; 0x09
     e00:	22 30       	cpi	r18, 0x02	; 2
     e02:	31 05       	cpc	r19, r1
     e04:	09 f4       	brne	.+2      	; 0xe08 <DIO_SetPinMode+0x58>
     e06:	57 c0       	rjmp	.+174    	; 0xeb6 <DIO_SetPinMode+0x106>
     e08:	88 85       	ldd	r24, Y+8	; 0x08
     e0a:	99 85       	ldd	r25, Y+9	; 0x09
     e0c:	83 30       	cpi	r24, 0x03	; 3
     e0e:	91 05       	cpc	r25, r1
     e10:	09 f4       	brne	.+2      	; 0xe14 <DIO_SetPinMode+0x64>
     e12:	79 c0       	rjmp	.+242    	; 0xf06 <DIO_SetPinMode+0x156>
     e14:	d4 c1       	rjmp	.+936    	; 0x11be <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
     e16:	aa e3       	ldi	r26, 0x3A	; 58
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	ea e3       	ldi	r30, 0x3A	; 58
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_SetPinMode+0x82>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	2a 95       	dec	r18
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_SetPinMode+0x7e>
     e36:	80 95       	com	r24
     e38:	84 23       	and	r24, r20
     e3a:	8c 93       	st	X, r24
            CLR_BIT(PORTA, pin);
     e3c:	ab e3       	ldi	r26, 0x3B	; 59
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	eb e3       	ldi	r30, 0x3B	; 59
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_SetPinMode+0xaa>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_SetPinMode+0xa6>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
     e64:	ac c1       	rjmp	.+856    	; 0x11be <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
     e66:	a7 e3       	ldi	r26, 0x37	; 55
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e7 e3       	ldi	r30, 0x37	; 55
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_SetPinMode+0xd2>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	2a 95       	dec	r18
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_SetPinMode+0xce>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
            CLR_BIT(PORTB, pin);
     e8c:	a8 e3       	ldi	r26, 0x38	; 56
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e8 e3       	ldi	r30, 0x38	; 56
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_SetPinMode+0xfa>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_SetPinMode+0xf6>
     eae:	80 95       	com	r24
     eb0:	84 23       	and	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	84 c1       	rjmp	.+776    	; 0x11be <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
     eb6:	a4 e3       	ldi	r26, 0x34	; 52
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e4 e3       	ldi	r30, 0x34	; 52
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_SetPinMode+0x122>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	2a 95       	dec	r18
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_SetPinMode+0x11e>
     ed6:	80 95       	com	r24
     ed8:	84 23       	and	r24, r20
     eda:	8c 93       	st	X, r24
            CLR_BIT(PORTC, pin);
     edc:	a5 e3       	ldi	r26, 0x35	; 53
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e5 e3       	ldi	r30, 0x35	; 53
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_SetPinMode+0x14a>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_SetPinMode+0x146>
     efe:	80 95       	com	r24
     f00:	84 23       	and	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	5c c1       	rjmp	.+696    	; 0x11be <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
     f06:	a1 e3       	ldi	r26, 0x31	; 49
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e1 e3       	ldi	r30, 0x31	; 49
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_SetPinMode+0x172>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	2a 95       	dec	r18
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_SetPinMode+0x16e>
     f26:	80 95       	com	r24
     f28:	84 23       	and	r24, r20
     f2a:	8c 93       	st	X, r24
            CLR_BIT(PORTD, pin);
     f2c:	a2 e3       	ldi	r26, 0x32	; 50
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e2 e3       	ldi	r30, 0x32	; 50
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_SetPinMode+0x19a>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_SetPinMode+0x196>
     f4e:	80 95       	com	r24
     f50:	84 23       	and	r24, r20
     f52:	8c 93       	st	X, r24
     f54:	34 c1       	rjmp	.+616    	; 0x11be <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP)
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	09 f0       	breq	.+2      	; 0xf5e <DIO_SetPinMode+0x1ae>
     f5c:	be c0       	rjmp	.+380    	; 0x10da <DIO_SetPinMode+0x32a>
    {
        switch (port)
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	3f 83       	std	Y+7, r19	; 0x07
     f66:	2e 83       	std	Y+6, r18	; 0x06
     f68:	8e 81       	ldd	r24, Y+6	; 0x06
     f6a:	9f 81       	ldd	r25, Y+7	; 0x07
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	91 05       	cpc	r25, r1
     f70:	09 f4       	brne	.+2      	; 0xf74 <DIO_SetPinMode+0x1c4>
     f72:	3e c0       	rjmp	.+124    	; 0xff0 <DIO_SetPinMode+0x240>
     f74:	2e 81       	ldd	r18, Y+6	; 0x06
     f76:	3f 81       	ldd	r19, Y+7	; 0x07
     f78:	22 30       	cpi	r18, 0x02	; 2
     f7a:	31 05       	cpc	r19, r1
     f7c:	2c f4       	brge	.+10     	; 0xf88 <DIO_SetPinMode+0x1d8>
     f7e:	8e 81       	ldd	r24, Y+6	; 0x06
     f80:	9f 81       	ldd	r25, Y+7	; 0x07
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	71 f0       	breq	.+28     	; 0xfa2 <DIO_SetPinMode+0x1f2>
     f86:	1b c1       	rjmp	.+566    	; 0x11be <DIO_SetPinMode+0x40e>
     f88:	2e 81       	ldd	r18, Y+6	; 0x06
     f8a:	3f 81       	ldd	r19, Y+7	; 0x07
     f8c:	22 30       	cpi	r18, 0x02	; 2
     f8e:	31 05       	cpc	r19, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <DIO_SetPinMode+0x1e4>
     f92:	55 c0       	rjmp	.+170    	; 0x103e <DIO_SetPinMode+0x28e>
     f94:	8e 81       	ldd	r24, Y+6	; 0x06
     f96:	9f 81       	ldd	r25, Y+7	; 0x07
     f98:	83 30       	cpi	r24, 0x03	; 3
     f9a:	91 05       	cpc	r25, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <DIO_SetPinMode+0x1f0>
     f9e:	76 c0       	rjmp	.+236    	; 0x108c <DIO_SetPinMode+0x2dc>
     fa0:	0e c1       	rjmp	.+540    	; 0x11be <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
     fa2:	aa e3       	ldi	r26, 0x3A	; 58
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	ea e3       	ldi	r30, 0x3A	; 58
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_SetPinMode+0x20e>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	2a 95       	dec	r18
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_SetPinMode+0x20a>
     fc2:	80 95       	com	r24
     fc4:	84 23       	and	r24, r20
     fc6:	8c 93       	st	X, r24
            SET_BIT(PORTA, pin);
     fc8:	ab e3       	ldi	r26, 0x3B	; 59
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	eb e3       	ldi	r30, 0x3B	; 59
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DIO_SetPinMode+0x236>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DIO_SetPinMode+0x232>
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	e7 c0       	rjmp	.+462    	; 0x11be <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
     ff0:	a7 e3       	ldi	r26, 0x37	; 55
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e7 e3       	ldi	r30, 0x37	; 55
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_SetPinMode+0x25c>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	2a 95       	dec	r18
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_SetPinMode+0x258>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
            SET_BIT(PORTB, pin);
    1016:	a8 e3       	ldi	r26, 0x38	; 56
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e8 e3       	ldi	r30, 0x38	; 56
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_SetPinMode+0x284>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_SetPinMode+0x280>
    1038:	84 2b       	or	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	c0 c0       	rjmp	.+384    	; 0x11be <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    103e:	a4 e3       	ldi	r26, 0x34	; 52
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e4 e3       	ldi	r30, 0x34	; 52
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_SetPinMode+0x2aa>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	2a 95       	dec	r18
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_SetPinMode+0x2a6>
    105e:	80 95       	com	r24
    1060:	84 23       	and	r24, r20
    1062:	8c 93       	st	X, r24
            SET_BIT(PORTC, pin);
    1064:	a5 e3       	ldi	r26, 0x35	; 53
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e5 e3       	ldi	r30, 0x35	; 53
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <DIO_SetPinMode+0x2d2>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <DIO_SetPinMode+0x2ce>
    1086:	84 2b       	or	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	99 c0       	rjmp	.+306    	; 0x11be <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    108c:	a1 e3       	ldi	r26, 0x31	; 49
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e1 e3       	ldi	r30, 0x31	; 49
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <DIO_SetPinMode+0x2f8>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	2a 95       	dec	r18
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <DIO_SetPinMode+0x2f4>
    10ac:	80 95       	com	r24
    10ae:	84 23       	and	r24, r20
    10b0:	8c 93       	st	X, r24
            SET_BIT(PORTD, pin);
    10b2:	a2 e3       	ldi	r26, 0x32	; 50
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e2 e3       	ldi	r30, 0x32	; 50
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_SetPinMode+0x320>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_SetPinMode+0x31c>
    10d4:	84 2b       	or	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	72 c0       	rjmp	.+228    	; 0x11be <DIO_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT)
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	82 30       	cpi	r24, 0x02	; 2
    10de:	09 f0       	breq	.+2      	; 0x10e2 <DIO_SetPinMode+0x332>
    10e0:	6e c0       	rjmp	.+220    	; 0x11be <DIO_SetPinMode+0x40e>
    {
        switch (port)
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	3d 83       	std	Y+5, r19	; 0x05
    10ea:	2c 83       	std	Y+4, r18	; 0x04
    10ec:	8c 81       	ldd	r24, Y+4	; 0x04
    10ee:	9d 81       	ldd	r25, Y+5	; 0x05
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	91 05       	cpc	r25, r1
    10f4:	49 f1       	breq	.+82     	; 0x1148 <DIO_SetPinMode+0x398>
    10f6:	2c 81       	ldd	r18, Y+4	; 0x04
    10f8:	3d 81       	ldd	r19, Y+5	; 0x05
    10fa:	22 30       	cpi	r18, 0x02	; 2
    10fc:	31 05       	cpc	r19, r1
    10fe:	2c f4       	brge	.+10     	; 0x110a <DIO_SetPinMode+0x35a>
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	9d 81       	ldd	r25, Y+5	; 0x05
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	61 f0       	breq	.+24     	; 0x1120 <DIO_SetPinMode+0x370>
    1108:	5a c0       	rjmp	.+180    	; 0x11be <DIO_SetPinMode+0x40e>
    110a:	2c 81       	ldd	r18, Y+4	; 0x04
    110c:	3d 81       	ldd	r19, Y+5	; 0x05
    110e:	22 30       	cpi	r18, 0x02	; 2
    1110:	31 05       	cpc	r19, r1
    1112:	71 f1       	breq	.+92     	; 0x1170 <DIO_SetPinMode+0x3c0>
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	83 30       	cpi	r24, 0x03	; 3
    111a:	91 05       	cpc	r25, r1
    111c:	e9 f1       	breq	.+122    	; 0x1198 <DIO_SetPinMode+0x3e8>
    111e:	4f c0       	rjmp	.+158    	; 0x11be <DIO_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            SET_BIT(DDRA, pin);
    1120:	aa e3       	ldi	r26, 0x3A	; 58
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	ea e3       	ldi	r30, 0x3A	; 58
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_SetPinMode+0x38e>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_SetPinMode+0x38a>
    1142:	84 2b       	or	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	3b c0       	rjmp	.+118    	; 0x11be <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            SET_BIT(DDRB, pin);
    1148:	a7 e3       	ldi	r26, 0x37	; 55
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e7 e3       	ldi	r30, 0x37	; 55
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_SetPinMode+0x3b6>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_SetPinMode+0x3b2>
    116a:	84 2b       	or	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	27 c0       	rjmp	.+78     	; 0x11be <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            SET_BIT(DDRC, pin);
    1170:	a4 e3       	ldi	r26, 0x34	; 52
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e4 e3       	ldi	r30, 0x34	; 52
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_SetPinMode+0x3de>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_SetPinMode+0x3da>
    1192:	84 2b       	or	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	13 c0       	rjmp	.+38     	; 0x11be <DIO_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            SET_BIT(DDRD, pin);
    1198:	a1 e3       	ldi	r26, 0x31	; 49
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e1 e3       	ldi	r30, 0x31	; 49
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_SetPinMode+0x406>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_SetPinMode+0x402>
    11ba:	84 2b       	or	r24, r20
    11bc:	8c 93       	st	X, r24
        default:
            break;
        }

    }
}
    11be:	29 96       	adiw	r28, 0x09	; 9
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <DIO_SetPortMode>:

void DIO_SetPortMode(DIO_PortType port, DIO_ModeType mode) {
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	2a 97       	sbiw	r28, 0x0a	; 10
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	6a 83       	std	Y+2, r22	; 0x02
    if (mode == DIO_INPUT_FLOATING)
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	88 23       	and	r24, r24
    11ec:	d9 f5       	brne	.+118    	; 0x1264 <DIO_SetPortMode+0x94>
    {
        switch (port)
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3a 87       	std	Y+10, r19	; 0x0a
    11f6:	29 87       	std	Y+9, r18	; 0x09
    11f8:	89 85       	ldd	r24, Y+9	; 0x09
    11fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	91 05       	cpc	r25, r1
    1200:	e1 f0       	breq	.+56     	; 0x123a <DIO_SetPortMode+0x6a>
    1202:	29 85       	ldd	r18, Y+9	; 0x09
    1204:	3a 85       	ldd	r19, Y+10	; 0x0a
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	2c f4       	brge	.+10     	; 0x1216 <DIO_SetPortMode+0x46>
    120c:	89 85       	ldd	r24, Y+9	; 0x09
    120e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	61 f0       	breq	.+24     	; 0x122c <DIO_SetPortMode+0x5c>
    1214:	d2 c0       	rjmp	.+420    	; 0x13ba <DIO_SetPortMode+0x1ea>
    1216:	29 85       	ldd	r18, Y+9	; 0x09
    1218:	3a 85       	ldd	r19, Y+10	; 0x0a
    121a:	22 30       	cpi	r18, 0x02	; 2
    121c:	31 05       	cpc	r19, r1
    121e:	a1 f0       	breq	.+40     	; 0x1248 <DIO_SetPortMode+0x78>
    1220:	89 85       	ldd	r24, Y+9	; 0x09
    1222:	9a 85       	ldd	r25, Y+10	; 0x0a
    1224:	83 30       	cpi	r24, 0x03	; 3
    1226:	91 05       	cpc	r25, r1
    1228:	b1 f0       	breq	.+44     	; 0x1256 <DIO_SetPortMode+0x86>
    122a:	c7 c0       	rjmp	.+398    	; 0x13ba <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    122c:	ea e3       	ldi	r30, 0x3A	; 58
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	10 82       	st	Z, r1
            PORTA = 0x00;
    1232:	eb e3       	ldi	r30, 0x3B	; 59
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	10 82       	st	Z, r1
    1238:	c0 c0       	rjmp	.+384    	; 0x13ba <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    123a:	e7 e3       	ldi	r30, 0x37	; 55
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	10 82       	st	Z, r1
            PORTB = 0x00;
    1240:	e8 e3       	ldi	r30, 0x38	; 56
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	10 82       	st	Z, r1
    1246:	b9 c0       	rjmp	.+370    	; 0x13ba <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    1248:	e4 e3       	ldi	r30, 0x34	; 52
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	10 82       	st	Z, r1
            PORTC = 0x00;
    124e:	e5 e3       	ldi	r30, 0x35	; 53
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	10 82       	st	Z, r1
    1254:	b2 c0       	rjmp	.+356    	; 0x13ba <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    1256:	e1 e3       	ldi	r30, 0x31	; 49
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	10 82       	st	Z, r1
            PORTD = 0x00;
    125c:	e2 e3       	ldi	r30, 0x32	; 50
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	10 82       	st	Z, r1
    1262:	ab c0       	rjmp	.+342    	; 0x13ba <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_INPUT_PULLUP)
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	09 f0       	breq	.+2      	; 0x126c <DIO_SetPortMode+0x9c>
    126a:	3f c0       	rjmp	.+126    	; 0x12ea <DIO_SetPortMode+0x11a>
    {
        switch (port)
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	38 87       	std	Y+8, r19	; 0x08
    1274:	2f 83       	std	Y+7, r18	; 0x07
    1276:	8f 81       	ldd	r24, Y+7	; 0x07
    1278:	98 85       	ldd	r25, Y+8	; 0x08
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	91 05       	cpc	r25, r1
    127e:	e9 f0       	breq	.+58     	; 0x12ba <DIO_SetPortMode+0xea>
    1280:	2f 81       	ldd	r18, Y+7	; 0x07
    1282:	38 85       	ldd	r19, Y+8	; 0x08
    1284:	22 30       	cpi	r18, 0x02	; 2
    1286:	31 05       	cpc	r19, r1
    1288:	2c f4       	brge	.+10     	; 0x1294 <DIO_SetPortMode+0xc4>
    128a:	8f 81       	ldd	r24, Y+7	; 0x07
    128c:	98 85       	ldd	r25, Y+8	; 0x08
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	61 f0       	breq	.+24     	; 0x12aa <DIO_SetPortMode+0xda>
    1292:	93 c0       	rjmp	.+294    	; 0x13ba <DIO_SetPortMode+0x1ea>
    1294:	2f 81       	ldd	r18, Y+7	; 0x07
    1296:	38 85       	ldd	r19, Y+8	; 0x08
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	b1 f0       	breq	.+44     	; 0x12ca <DIO_SetPortMode+0xfa>
    129e:	8f 81       	ldd	r24, Y+7	; 0x07
    12a0:	98 85       	ldd	r25, Y+8	; 0x08
    12a2:	83 30       	cpi	r24, 0x03	; 3
    12a4:	91 05       	cpc	r25, r1
    12a6:	c9 f0       	breq	.+50     	; 0x12da <DIO_SetPortMode+0x10a>
    12a8:	88 c0       	rjmp	.+272    	; 0x13ba <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0x00;
    12aa:	ea e3       	ldi	r30, 0x3A	; 58
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	10 82       	st	Z, r1
            PORTA = 0xFF;
    12b0:	eb e3       	ldi	r30, 0x3B	; 59
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	80 83       	st	Z, r24
    12b8:	80 c0       	rjmp	.+256    	; 0x13ba <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0x00;
    12ba:	e7 e3       	ldi	r30, 0x37	; 55
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	10 82       	st	Z, r1
            PORTB = 0xFF;
    12c0:	e8 e3       	ldi	r30, 0x38	; 56
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	80 83       	st	Z, r24
    12c8:	78 c0       	rjmp	.+240    	; 0x13ba <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0x00;
    12ca:	e4 e3       	ldi	r30, 0x34	; 52
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	10 82       	st	Z, r1
            PORTC = 0xFF;
    12d0:	e5 e3       	ldi	r30, 0x35	; 53
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	80 83       	st	Z, r24
    12d8:	70 c0       	rjmp	.+224    	; 0x13ba <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0x00;
    12da:	e1 e3       	ldi	r30, 0x31	; 49
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	10 82       	st	Z, r1
            PORTD = 0xFF;
    12e0:	e2 e3       	ldi	r30, 0x32	; 50
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	80 83       	st	Z, r24
    12e8:	68 c0       	rjmp	.+208    	; 0x13ba <DIO_SetPortMode+0x1ea>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_OUTPUT)
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	82 30       	cpi	r24, 0x02	; 2
    12ee:	99 f5       	brne	.+102    	; 0x1356 <DIO_SetPortMode+0x186>
    {
        switch (port)
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3e 83       	std	Y+6, r19	; 0x06
    12f8:	2d 83       	std	Y+5, r18	; 0x05
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	91 05       	cpc	r25, r1
    1302:	d1 f0       	breq	.+52     	; 0x1338 <DIO_SetPortMode+0x168>
    1304:	2d 81       	ldd	r18, Y+5	; 0x05
    1306:	3e 81       	ldd	r19, Y+6	; 0x06
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	2c f4       	brge	.+10     	; 0x1318 <DIO_SetPortMode+0x148>
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	61 f0       	breq	.+24     	; 0x132e <DIO_SetPortMode+0x15e>
    1316:	51 c0       	rjmp	.+162    	; 0x13ba <DIO_SetPortMode+0x1ea>
    1318:	2d 81       	ldd	r18, Y+5	; 0x05
    131a:	3e 81       	ldd	r19, Y+6	; 0x06
    131c:	22 30       	cpi	r18, 0x02	; 2
    131e:	31 05       	cpc	r19, r1
    1320:	81 f0       	breq	.+32     	; 0x1342 <DIO_SetPortMode+0x172>
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	83 30       	cpi	r24, 0x03	; 3
    1328:	91 05       	cpc	r25, r1
    132a:	81 f0       	breq	.+32     	; 0x134c <DIO_SetPortMode+0x17c>
    132c:	46 c0       	rjmp	.+140    	; 0x13ba <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = 0xFF;
    132e:	ea e3       	ldi	r30, 0x3A	; 58
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	80 83       	st	Z, r24
    1336:	41 c0       	rjmp	.+130    	; 0x13ba <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = 0xFF;
    1338:	e7 e3       	ldi	r30, 0x37	; 55
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	8f ef       	ldi	r24, 0xFF	; 255
    133e:	80 83       	st	Z, r24
    1340:	3c c0       	rjmp	.+120    	; 0x13ba <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = 0xFF;
    1342:	e4 e3       	ldi	r30, 0x34	; 52
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	80 83       	st	Z, r24
    134a:	37 c0       	rjmp	.+110    	; 0x13ba <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = 0xFF;
    134c:	e1 e3       	ldi	r30, 0x31	; 49
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	8f ef       	ldi	r24, 0xFF	; 255
    1352:	80 83       	st	Z, r24
    1354:	32 c0       	rjmp	.+100    	; 0x13ba <DIO_SetPortMode+0x1ea>
        }

    }
    else
    {
        switch (port)
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	3c 83       	std	Y+4, r19	; 0x04
    135e:	2b 83       	std	Y+3, r18	; 0x03
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	91 05       	cpc	r25, r1
    1368:	d1 f0       	breq	.+52     	; 0x139e <DIO_SetPortMode+0x1ce>
    136a:	2b 81       	ldd	r18, Y+3	; 0x03
    136c:	3c 81       	ldd	r19, Y+4	; 0x04
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	2c f4       	brge	.+10     	; 0x137e <DIO_SetPortMode+0x1ae>
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	61 f0       	breq	.+24     	; 0x1394 <DIO_SetPortMode+0x1c4>
    137c:	1e c0       	rjmp	.+60     	; 0x13ba <DIO_SetPortMode+0x1ea>
    137e:	2b 81       	ldd	r18, Y+3	; 0x03
    1380:	3c 81       	ldd	r19, Y+4	; 0x04
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	81 f0       	breq	.+32     	; 0x13a8 <DIO_SetPortMode+0x1d8>
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	91 05       	cpc	r25, r1
    1390:	81 f0       	breq	.+32     	; 0x13b2 <DIO_SetPortMode+0x1e2>
    1392:	13 c0       	rjmp	.+38     	; 0x13ba <DIO_SetPortMode+0x1ea>
        {
        case DIO_PORTA:
            DDRA = mode;
    1394:	ea e3       	ldi	r30, 0x3A	; 58
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	80 83       	st	Z, r24
    139c:	0e c0       	rjmp	.+28     	; 0x13ba <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTB:
            DDRB = mode;
    139e:	e7 e3       	ldi	r30, 0x37	; 55
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	80 83       	st	Z, r24
    13a6:	09 c0       	rjmp	.+18     	; 0x13ba <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTC:
            DDRC = mode;
    13a8:	e4 e3       	ldi	r30, 0x34	; 52
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	80 83       	st	Z, r24
    13b0:	04 c0       	rjmp	.+8      	; 0x13ba <DIO_SetPortMode+0x1ea>
            break;
        case DIO_PORTD:
            DDRD = mode;
    13b2:	e1 e3       	ldi	r30, 0x31	; 49
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    13ba:	2a 96       	adiw	r28, 0x0a	; 10
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <DIO_SetPinLevel>:


void DIO_SetPinLevel(DIO_PortType port, DIO_PinType pin, DIO_LevelType level) {
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	27 97       	sbiw	r28, 0x07	; 7
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	6a 83       	std	Y+2, r22	; 0x02
    13e4:	4b 83       	std	Y+3, r20	; 0x03
    if (level == DIO_HIGH)
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	09 f0       	breq	.+2      	; 0x13ee <DIO_SetPinLevel+0x22>
    13ec:	6f c0       	rjmp	.+222    	; 0x14cc <DIO_SetPinLevel+0x100>
    {
        switch (port)
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	3f 83       	std	Y+7, r19	; 0x07
    13f6:	2e 83       	std	Y+6, r18	; 0x06
    13f8:	8e 81       	ldd	r24, Y+6	; 0x06
    13fa:	9f 81       	ldd	r25, Y+7	; 0x07
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	91 05       	cpc	r25, r1
    1400:	49 f1       	breq	.+82     	; 0x1454 <DIO_SetPinLevel+0x88>
    1402:	2e 81       	ldd	r18, Y+6	; 0x06
    1404:	3f 81       	ldd	r19, Y+7	; 0x07
    1406:	22 30       	cpi	r18, 0x02	; 2
    1408:	31 05       	cpc	r19, r1
    140a:	2c f4       	brge	.+10     	; 0x1416 <DIO_SetPinLevel+0x4a>
    140c:	8e 81       	ldd	r24, Y+6	; 0x06
    140e:	9f 81       	ldd	r25, Y+7	; 0x07
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	61 f0       	breq	.+24     	; 0x142c <DIO_SetPinLevel+0x60>
    1414:	d2 c0       	rjmp	.+420    	; 0x15ba <DIO_SetPinLevel+0x1ee>
    1416:	2e 81       	ldd	r18, Y+6	; 0x06
    1418:	3f 81       	ldd	r19, Y+7	; 0x07
    141a:	22 30       	cpi	r18, 0x02	; 2
    141c:	31 05       	cpc	r19, r1
    141e:	71 f1       	breq	.+92     	; 0x147c <DIO_SetPinLevel+0xb0>
    1420:	8e 81       	ldd	r24, Y+6	; 0x06
    1422:	9f 81       	ldd	r25, Y+7	; 0x07
    1424:	83 30       	cpi	r24, 0x03	; 3
    1426:	91 05       	cpc	r25, r1
    1428:	e9 f1       	breq	.+122    	; 0x14a4 <DIO_SetPinLevel+0xd8>
    142a:	c7 c0       	rjmp	.+398    	; 0x15ba <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            SET_BIT(PORTA, pin);
    142c:	ab e3       	ldi	r26, 0x3B	; 59
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	eb e3       	ldi	r30, 0x3B	; 59
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <DIO_SetPinLevel+0x7e>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <DIO_SetPinLevel+0x7a>
    144e:	84 2b       	or	r24, r20
    1450:	8c 93       	st	X, r24
    1452:	b3 c0       	rjmp	.+358    	; 0x15ba <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            SET_BIT(PORTB, pin);
    1454:	a8 e3       	ldi	r26, 0x38	; 56
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e8 e3       	ldi	r30, 0x38	; 56
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <DIO_SetPinLevel+0xa6>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <DIO_SetPinLevel+0xa2>
    1476:	84 2b       	or	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	9f c0       	rjmp	.+318    	; 0x15ba <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            SET_BIT(PORTC, pin);
    147c:	a5 e3       	ldi	r26, 0x35	; 53
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e5 e3       	ldi	r30, 0x35	; 53
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_SetPinLevel+0xce>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_SetPinLevel+0xca>
    149e:	84 2b       	or	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	8b c0       	rjmp	.+278    	; 0x15ba <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            SET_BIT(PORTD, pin);
    14a4:	a2 e3       	ldi	r26, 0x32	; 50
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e2 e3       	ldi	r30, 0x32	; 50
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	48 2f       	mov	r20, r24
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 2e       	mov	r0, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <DIO_SetPinLevel+0xf6>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	0a 94       	dec	r0
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <DIO_SetPinLevel+0xf2>
    14c6:	84 2b       	or	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	77 c0       	rjmp	.+238    	; 0x15ba <DIO_SetPinLevel+0x1ee>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW)
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	88 23       	and	r24, r24
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <DIO_SetPinLevel+0x108>
    14d2:	73 c0       	rjmp	.+230    	; 0x15ba <DIO_SetPinLevel+0x1ee>
    {
        switch (port)
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	3d 83       	std	Y+5, r19	; 0x05
    14dc:	2c 83       	std	Y+4, r18	; 0x04
    14de:	8c 81       	ldd	r24, Y+4	; 0x04
    14e0:	9d 81       	ldd	r25, Y+5	; 0x05
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	91 05       	cpc	r25, r1
    14e6:	59 f1       	breq	.+86     	; 0x153e <DIO_SetPinLevel+0x172>
    14e8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ea:	3d 81       	ldd	r19, Y+5	; 0x05
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	2c f4       	brge	.+10     	; 0x14fc <DIO_SetPinLevel+0x130>
    14f2:	8c 81       	ldd	r24, Y+4	; 0x04
    14f4:	9d 81       	ldd	r25, Y+5	; 0x05
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	69 f0       	breq	.+26     	; 0x1514 <DIO_SetPinLevel+0x148>
    14fa:	5f c0       	rjmp	.+190    	; 0x15ba <DIO_SetPinLevel+0x1ee>
    14fc:	2c 81       	ldd	r18, Y+4	; 0x04
    14fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1500:	22 30       	cpi	r18, 0x02	; 2
    1502:	31 05       	cpc	r19, r1
    1504:	89 f1       	breq	.+98     	; 0x1568 <DIO_SetPinLevel+0x19c>
    1506:	8c 81       	ldd	r24, Y+4	; 0x04
    1508:	9d 81       	ldd	r25, Y+5	; 0x05
    150a:	83 30       	cpi	r24, 0x03	; 3
    150c:	91 05       	cpc	r25, r1
    150e:	09 f4       	brne	.+2      	; 0x1512 <DIO_SetPinLevel+0x146>
    1510:	40 c0       	rjmp	.+128    	; 0x1592 <DIO_SetPinLevel+0x1c6>
    1512:	53 c0       	rjmp	.+166    	; 0x15ba <DIO_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            CLR_BIT(PORTA, pin);
    1514:	ab e3       	ldi	r26, 0x3B	; 59
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	eb e3       	ldi	r30, 0x3B	; 59
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 2e       	mov	r0, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <DIO_SetPinLevel+0x166>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	0a 94       	dec	r0
    1534:	e2 f7       	brpl	.-8      	; 0x152e <DIO_SetPinLevel+0x162>
    1536:	80 95       	com	r24
    1538:	84 23       	and	r24, r20
    153a:	8c 93       	st	X, r24
    153c:	3e c0       	rjmp	.+124    	; 0x15ba <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            CLR_BIT(PORTB, pin);
    153e:	a8 e3       	ldi	r26, 0x38	; 56
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e8 e3       	ldi	r30, 0x38	; 56
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <DIO_SetPinLevel+0x190>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <DIO_SetPinLevel+0x18c>
    1560:	80 95       	com	r24
    1562:	84 23       	and	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	29 c0       	rjmp	.+82     	; 0x15ba <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            CLR_BIT(PORTC, pin);
    1568:	a5 e3       	ldi	r26, 0x35	; 53
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e5 e3       	ldi	r30, 0x35	; 53
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_SetPinLevel+0x1ba>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_SetPinLevel+0x1b6>
    158a:	80 95       	com	r24
    158c:	84 23       	and	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	14 c0       	rjmp	.+40     	; 0x15ba <DIO_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            CLR_BIT(PORTD, pin);
    1592:	a2 e3       	ldi	r26, 0x32	; 50
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e2 e3       	ldi	r30, 0x32	; 50
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	02 2e       	mov	r0, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <DIO_SetPinLevel+0x1e4>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	0a 94       	dec	r0
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <DIO_SetPinLevel+0x1e0>
    15b4:	80 95       	com	r24
    15b6:	84 23       	and	r24, r20
    15b8:	8c 93       	st	X, r24
            break;
        default:
            break;
        }
    }
}
    15ba:	27 96       	adiw	r28, 0x07	; 7
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <DIO_SetPortLevel>:

void DIO_SetPortLevel (DIO_PortType port, DIO_LevelType level) {
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	28 97       	sbiw	r28, 0x08	; 8
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	6a 83       	std	Y+2, r22	; 0x02
    if (level == DIO_HIGH) {
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	99 f5       	brne	.+102    	; 0x1650 <DIO_SetPortLevel+0x84>
        switch (port)
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	38 87       	std	Y+8, r19	; 0x08
    15f2:	2f 83       	std	Y+7, r18	; 0x07
    15f4:	8f 81       	ldd	r24, Y+7	; 0x07
    15f6:	98 85       	ldd	r25, Y+8	; 0x08
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	91 05       	cpc	r25, r1
    15fc:	d1 f0       	breq	.+52     	; 0x1632 <DIO_SetPortLevel+0x66>
    15fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1600:	38 85       	ldd	r19, Y+8	; 0x08
    1602:	22 30       	cpi	r18, 0x02	; 2
    1604:	31 05       	cpc	r19, r1
    1606:	2c f4       	brge	.+10     	; 0x1612 <DIO_SetPortLevel+0x46>
    1608:	8f 81       	ldd	r24, Y+7	; 0x07
    160a:	98 85       	ldd	r25, Y+8	; 0x08
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	61 f0       	breq	.+24     	; 0x1628 <DIO_SetPortLevel+0x5c>
    1610:	83 c0       	rjmp	.+262    	; 0x1718 <DIO_SetPortLevel+0x14c>
    1612:	2f 81       	ldd	r18, Y+7	; 0x07
    1614:	38 85       	ldd	r19, Y+8	; 0x08
    1616:	22 30       	cpi	r18, 0x02	; 2
    1618:	31 05       	cpc	r19, r1
    161a:	81 f0       	breq	.+32     	; 0x163c <DIO_SetPortLevel+0x70>
    161c:	8f 81       	ldd	r24, Y+7	; 0x07
    161e:	98 85       	ldd	r25, Y+8	; 0x08
    1620:	83 30       	cpi	r24, 0x03	; 3
    1622:	91 05       	cpc	r25, r1
    1624:	81 f0       	breq	.+32     	; 0x1646 <DIO_SetPortLevel+0x7a>
    1626:	78 c0       	rjmp	.+240    	; 0x1718 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0xFF;
    1628:	eb e3       	ldi	r30, 0x3B	; 59
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	8f ef       	ldi	r24, 0xFF	; 255
    162e:	80 83       	st	Z, r24
    1630:	73 c0       	rjmp	.+230    	; 0x1718 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0xFF;
    1632:	e8 e3       	ldi	r30, 0x38	; 56
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	8f ef       	ldi	r24, 0xFF	; 255
    1638:	80 83       	st	Z, r24
    163a:	6e c0       	rjmp	.+220    	; 0x1718 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0xFF;
    163c:	e5 e3       	ldi	r30, 0x35	; 53
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	8f ef       	ldi	r24, 0xFF	; 255
    1642:	80 83       	st	Z, r24
    1644:	69 c0       	rjmp	.+210    	; 0x1718 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0xFF;
    1646:	e2 e3       	ldi	r30, 0x32	; 50
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	8f ef       	ldi	r24, 0xFF	; 255
    164c:	80 83       	st	Z, r24
    164e:	64 c0       	rjmp	.+200    	; 0x1718 <DIO_SetPortLevel+0x14c>
            break;
        default:
            break;
        }
    }
    else if (level == DIO_LOW) {
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	88 23       	and	r24, r24
    1654:	79 f5       	brne	.+94     	; 0x16b4 <DIO_SetPortLevel+0xe8>
        switch (port)
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	3e 83       	std	Y+6, r19	; 0x06
    165e:	2d 83       	std	Y+5, r18	; 0x05
    1660:	8d 81       	ldd	r24, Y+5	; 0x05
    1662:	9e 81       	ldd	r25, Y+6	; 0x06
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	91 05       	cpc	r25, r1
    1668:	c9 f0       	breq	.+50     	; 0x169c <DIO_SetPortLevel+0xd0>
    166a:	2d 81       	ldd	r18, Y+5	; 0x05
    166c:	3e 81       	ldd	r19, Y+6	; 0x06
    166e:	22 30       	cpi	r18, 0x02	; 2
    1670:	31 05       	cpc	r19, r1
    1672:	2c f4       	brge	.+10     	; 0x167e <DIO_SetPortLevel+0xb2>
    1674:	8d 81       	ldd	r24, Y+5	; 0x05
    1676:	9e 81       	ldd	r25, Y+6	; 0x06
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	61 f0       	breq	.+24     	; 0x1694 <DIO_SetPortLevel+0xc8>
    167c:	4d c0       	rjmp	.+154    	; 0x1718 <DIO_SetPortLevel+0x14c>
    167e:	2d 81       	ldd	r18, Y+5	; 0x05
    1680:	3e 81       	ldd	r19, Y+6	; 0x06
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	71 f0       	breq	.+28     	; 0x16a4 <DIO_SetPortLevel+0xd8>
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	83 30       	cpi	r24, 0x03	; 3
    168e:	91 05       	cpc	r25, r1
    1690:	69 f0       	breq	.+26     	; 0x16ac <DIO_SetPortLevel+0xe0>
    1692:	42 c0       	rjmp	.+132    	; 0x1718 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = 0x00;
    1694:	eb e3       	ldi	r30, 0x3B	; 59
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	10 82       	st	Z, r1
    169a:	3e c0       	rjmp	.+124    	; 0x1718 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = 0x00;
    169c:	e8 e3       	ldi	r30, 0x38	; 56
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	10 82       	st	Z, r1
    16a2:	3a c0       	rjmp	.+116    	; 0x1718 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = 0x00;
    16a4:	e5 e3       	ldi	r30, 0x35	; 53
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	10 82       	st	Z, r1
    16aa:	36 c0       	rjmp	.+108    	; 0x1718 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = 0x00;
    16ac:	e2 e3       	ldi	r30, 0x32	; 50
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	10 82       	st	Z, r1
    16b2:	32 c0       	rjmp	.+100    	; 0x1718 <DIO_SetPortLevel+0x14c>
        default:
            break;
        }
    }
    else {
        switch (port)
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	3c 83       	std	Y+4, r19	; 0x04
    16bc:	2b 83       	std	Y+3, r18	; 0x03
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	91 05       	cpc	r25, r1
    16c6:	d1 f0       	breq	.+52     	; 0x16fc <DIO_SetPortLevel+0x130>
    16c8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ca:	3c 81       	ldd	r19, Y+4	; 0x04
    16cc:	22 30       	cpi	r18, 0x02	; 2
    16ce:	31 05       	cpc	r19, r1
    16d0:	2c f4       	brge	.+10     	; 0x16dc <DIO_SetPortLevel+0x110>
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	9c 81       	ldd	r25, Y+4	; 0x04
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	61 f0       	breq	.+24     	; 0x16f2 <DIO_SetPortLevel+0x126>
    16da:	1e c0       	rjmp	.+60     	; 0x1718 <DIO_SetPortLevel+0x14c>
    16dc:	2b 81       	ldd	r18, Y+3	; 0x03
    16de:	3c 81       	ldd	r19, Y+4	; 0x04
    16e0:	22 30       	cpi	r18, 0x02	; 2
    16e2:	31 05       	cpc	r19, r1
    16e4:	81 f0       	breq	.+32     	; 0x1706 <DIO_SetPortLevel+0x13a>
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ea:	83 30       	cpi	r24, 0x03	; 3
    16ec:	91 05       	cpc	r25, r1
    16ee:	81 f0       	breq	.+32     	; 0x1710 <DIO_SetPortLevel+0x144>
    16f0:	13 c0       	rjmp	.+38     	; 0x1718 <DIO_SetPortLevel+0x14c>
        {
        case DIO_PORTA:
            PORTA = level;
    16f2:	eb e3       	ldi	r30, 0x3B	; 59
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	80 83       	st	Z, r24
    16fa:	0e c0       	rjmp	.+28     	; 0x1718 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTB:
            PORTB = level;
    16fc:	e8 e3       	ldi	r30, 0x38	; 56
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	80 83       	st	Z, r24
    1704:	09 c0       	rjmp	.+18     	; 0x1718 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTC:
            PORTC = level;
    1706:	e5 e3       	ldi	r30, 0x35	; 53
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	80 83       	st	Z, r24
    170e:	04 c0       	rjmp	.+8      	; 0x1718 <DIO_SetPortLevel+0x14c>
            break;
        case DIO_PORTD:
            PORTD = level;
    1710:	e2 e3       	ldi	r30, 0x32	; 50
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	80 83       	st	Z, r24
        default:
            break;
        }

    }
}
    1718:	28 96       	adiw	r28, 0x08	; 8
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <DIO_ReadPinLevel>:



DIO_LevelType DIO_ReadPinLevel(DIO_PortType port, DIO_PinType pin) {
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	00 d0       	rcall	.+0      	; 0x1730 <DIO_ReadPinLevel+0x6>
    1730:	00 d0       	rcall	.+0      	; 0x1732 <DIO_ReadPinLevel+0x8>
    1732:	0f 92       	push	r0
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	8a 83       	std	Y+2, r24	; 0x02
    173a:	6b 83       	std	Y+3, r22	; 0x03
    DIO_LevelType result = DIO_LOW;
    173c:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	3d 83       	std	Y+5, r19	; 0x05
    1746:	2c 83       	std	Y+4, r18	; 0x04
    1748:	4c 81       	ldd	r20, Y+4	; 0x04
    174a:	5d 81       	ldd	r21, Y+5	; 0x05
    174c:	41 30       	cpi	r20, 0x01	; 1
    174e:	51 05       	cpc	r21, r1
    1750:	41 f1       	breq	.+80     	; 0x17a2 <DIO_ReadPinLevel+0x78>
    1752:	8c 81       	ldd	r24, Y+4	; 0x04
    1754:	9d 81       	ldd	r25, Y+5	; 0x05
    1756:	82 30       	cpi	r24, 0x02	; 2
    1758:	91 05       	cpc	r25, r1
    175a:	34 f4       	brge	.+12     	; 0x1768 <DIO_ReadPinLevel+0x3e>
    175c:	2c 81       	ldd	r18, Y+4	; 0x04
    175e:	3d 81       	ldd	r19, Y+5	; 0x05
    1760:	21 15       	cp	r18, r1
    1762:	31 05       	cpc	r19, r1
    1764:	61 f0       	breq	.+24     	; 0x177e <DIO_ReadPinLevel+0x54>
    1766:	52 c0       	rjmp	.+164    	; 0x180c <DIO_ReadPinLevel+0xe2>
    1768:	4c 81       	ldd	r20, Y+4	; 0x04
    176a:	5d 81       	ldd	r21, Y+5	; 0x05
    176c:	42 30       	cpi	r20, 0x02	; 2
    176e:	51 05       	cpc	r21, r1
    1770:	51 f1       	breq	.+84     	; 0x17c6 <DIO_ReadPinLevel+0x9c>
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	9d 81       	ldd	r25, Y+5	; 0x05
    1776:	83 30       	cpi	r24, 0x03	; 3
    1778:	91 05       	cpc	r25, r1
    177a:	b9 f1       	breq	.+110    	; 0x17ea <DIO_ReadPinLevel+0xc0>
    177c:	47 c0       	rjmp	.+142    	; 0x180c <DIO_ReadPinLevel+0xe2>
    {
    case DIO_PORTA:
        result = GET_BIT(PINA, pin);
    177e:	e9 e3       	ldi	r30, 0x39	; 57
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a9 01       	movw	r20, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <DIO_ReadPinLevel+0x6c>
    1792:	55 95       	asr	r21
    1794:	47 95       	ror	r20
    1796:	8a 95       	dec	r24
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <DIO_ReadPinLevel+0x68>
    179a:	ca 01       	movw	r24, r20
    179c:	81 70       	andi	r24, 0x01	; 1
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	35 c0       	rjmp	.+106    	; 0x180c <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTB:
        result = GET_BIT(PINB, pin);
    17a2:	e6 e3       	ldi	r30, 0x36	; 54
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	88 2f       	mov	r24, r24
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	a9 01       	movw	r20, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <DIO_ReadPinLevel+0x90>
    17b6:	55 95       	asr	r21
    17b8:	47 95       	ror	r20
    17ba:	8a 95       	dec	r24
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <DIO_ReadPinLevel+0x8c>
    17be:	ca 01       	movw	r24, r20
    17c0:	81 70       	andi	r24, 0x01	; 1
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	23 c0       	rjmp	.+70     	; 0x180c <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTC:
        result = GET_BIT(PINC, pin);
    17c6:	e3 e3       	ldi	r30, 0x33	; 51
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	88 2f       	mov	r24, r24
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	a9 01       	movw	r20, r18
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <DIO_ReadPinLevel+0xb4>
    17da:	55 95       	asr	r21
    17dc:	47 95       	ror	r20
    17de:	8a 95       	dec	r24
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <DIO_ReadPinLevel+0xb0>
    17e2:	ca 01       	movw	r24, r20
    17e4:	81 70       	andi	r24, 0x01	; 1
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	11 c0       	rjmp	.+34     	; 0x180c <DIO_ReadPinLevel+0xe2>
        break;
    case DIO_PORTD:
        result = GET_BIT(PIND, pin);
    17ea:	e0 e3       	ldi	r30, 0x30	; 48
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	88 2f       	mov	r24, r24
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a9 01       	movw	r20, r18
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <DIO_ReadPinLevel+0xd8>
    17fe:	55 95       	asr	r21
    1800:	47 95       	ror	r20
    1802:	8a 95       	dec	r24
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <DIO_ReadPinLevel+0xd4>
    1806:	ca 01       	movw	r24, r20
    1808:	81 70       	andi	r24, 0x01	; 1
    180a:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return result;
    180c:	89 81       	ldd	r24, Y+1	; 0x01
}
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <DIO_ReadPortLevel>:

DIO_LevelType DIO_ReadPortLevel (DIO_PortType port) {
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	00 d0       	rcall	.+0      	; 0x1824 <DIO_ReadPortLevel+0x6>
    1824:	00 d0       	rcall	.+0      	; 0x1826 <DIO_ReadPortLevel+0x8>
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	8a 83       	std	Y+2, r24	; 0x02
    u8 result = 0x00;
    182c:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	3c 83       	std	Y+4, r19	; 0x04
    1836:	2b 83       	std	Y+3, r18	; 0x03
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	91 05       	cpc	r25, r1
    1840:	49 f1       	breq	.+82     	; 0x1894 <DIO_ReadPortLevel+0x76>
    1842:	2b 81       	ldd	r18, Y+3	; 0x03
    1844:	3c 81       	ldd	r19, Y+4	; 0x04
    1846:	22 30       	cpi	r18, 0x02	; 2
    1848:	31 05       	cpc	r19, r1
    184a:	2c f4       	brge	.+10     	; 0x1856 <DIO_ReadPortLevel+0x38>
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	9c 81       	ldd	r25, Y+4	; 0x04
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	61 f0       	breq	.+24     	; 0x186c <DIO_ReadPortLevel+0x4e>
    1854:	5a c0       	rjmp	.+180    	; 0x190a <DIO_ReadPortLevel+0xec>
    1856:	2b 81       	ldd	r18, Y+3	; 0x03
    1858:	3c 81       	ldd	r19, Y+4	; 0x04
    185a:	22 30       	cpi	r18, 0x02	; 2
    185c:	31 05       	cpc	r19, r1
    185e:	71 f1       	breq	.+92     	; 0x18bc <DIO_ReadPortLevel+0x9e>
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	9c 81       	ldd	r25, Y+4	; 0x04
    1864:	83 30       	cpi	r24, 0x03	; 3
    1866:	91 05       	cpc	r25, r1
    1868:	e9 f1       	breq	.+122    	; 0x18e4 <DIO_ReadPortLevel+0xc6>
    186a:	4f c0       	rjmp	.+158    	; 0x190a <DIO_ReadPortLevel+0xec>
    {
    case DIO_PORTA:
        if (PINA == 0xFF) {
    186c:	e9 e3       	ldi	r30, 0x39	; 57
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	8f 3f       	cpi	r24, 0xFF	; 255
    1874:	19 f4       	brne	.+6      	; 0x187c <DIO_ReadPortLevel+0x5e>
            result = DIO_HIGH;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	47 c0       	rjmp	.+142    	; 0x190a <DIO_ReadPortLevel+0xec>
        }
        else if (PINA == 0x00) {
    187c:	e9 e3       	ldi	r30, 0x39	; 57
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	88 23       	and	r24, r24
    1884:	11 f4       	brne	.+4      	; 0x188a <DIO_ReadPortLevel+0x6c>
            result = DIO_LOW;
    1886:	19 82       	std	Y+1, r1	; 0x01
    1888:	40 c0       	rjmp	.+128    	; 0x190a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINA;
    188a:	e9 e3       	ldi	r30, 0x39	; 57
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	3b c0       	rjmp	.+118    	; 0x190a <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTB:
        if (PINB == 0xFF) {
    1894:	e6 e3       	ldi	r30, 0x36	; 54
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	8f 3f       	cpi	r24, 0xFF	; 255
    189c:	19 f4       	brne	.+6      	; 0x18a4 <DIO_ReadPortLevel+0x86>
            result = DIO_HIGH;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	33 c0       	rjmp	.+102    	; 0x190a <DIO_ReadPortLevel+0xec>
        }
        else if (PINB == 0x00) {
    18a4:	e6 e3       	ldi	r30, 0x36	; 54
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	88 23       	and	r24, r24
    18ac:	11 f4       	brne	.+4      	; 0x18b2 <DIO_ReadPortLevel+0x94>
            result = DIO_LOW;
    18ae:	19 82       	std	Y+1, r1	; 0x01
    18b0:	2c c0       	rjmp	.+88     	; 0x190a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINB;
    18b2:	e6 e3       	ldi	r30, 0x36	; 54
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	27 c0       	rjmp	.+78     	; 0x190a <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTC:
        if (PINC == 0xFF) {
    18bc:	e3 e3       	ldi	r30, 0x33	; 51
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	8f 3f       	cpi	r24, 0xFF	; 255
    18c4:	19 f4       	brne	.+6      	; 0x18cc <DIO_ReadPortLevel+0xae>
            result = DIO_HIGH;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	1f c0       	rjmp	.+62     	; 0x190a <DIO_ReadPortLevel+0xec>
        }
        else if (PINC == 0x00) {
    18cc:	e3 e3       	ldi	r30, 0x33	; 51
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	88 23       	and	r24, r24
    18d4:	11 f4       	brne	.+4      	; 0x18da <DIO_ReadPortLevel+0xbc>
            result = DIO_LOW;
    18d6:	19 82       	std	Y+1, r1	; 0x01
    18d8:	18 c0       	rjmp	.+48     	; 0x190a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PINC;
    18da:	e3 e3       	ldi	r30, 0x33	; 51
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	89 83       	std	Y+1, r24	; 0x01
    18e2:	13 c0       	rjmp	.+38     	; 0x190a <DIO_ReadPortLevel+0xec>
        }
        break;
    case DIO_PORTD:
        if (PIND == 0xFF) {
    18e4:	e0 e3       	ldi	r30, 0x30	; 48
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	8f 3f       	cpi	r24, 0xFF	; 255
    18ec:	19 f4       	brne	.+6      	; 0x18f4 <DIO_ReadPortLevel+0xd6>
            result = DIO_HIGH;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	0b c0       	rjmp	.+22     	; 0x190a <DIO_ReadPortLevel+0xec>
        }
        else if (PIND == 0x00) {
    18f4:	e0 e3       	ldi	r30, 0x30	; 48
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	88 23       	and	r24, r24
    18fc:	11 f4       	brne	.+4      	; 0x1902 <DIO_ReadPortLevel+0xe4>
            result = DIO_LOW;
    18fe:	19 82       	std	Y+1, r1	; 0x01
    1900:	04 c0       	rjmp	.+8      	; 0x190a <DIO_ReadPortLevel+0xec>
        }
        else {
            result = PIND;
    1902:	e0 e3       	ldi	r30, 0x30	; 48
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	89 83       	std	Y+1, r24	; 0x01
        }
        break;
    default:
        break;
    }
    return result;
    190a:	89 81       	ldd	r24, Y+1	; 0x01
}
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <Keypad_Init>:
#include "std_types.h"
#include "macros.h"
#include "DIO.h"
#include "Keypad.h"

void Keypad_Init(void) {
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    /* Set all rows to input pullup */
    DIO_SetPinMode(KEYPAD_PIN_R0, DIO_INPUT_PULLUP);
    1922:	83 e0       	ldi	r24, 0x03	; 3
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	41 e0       	ldi	r20, 0x01	; 1
    1928:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R1, DIO_INPUT_PULLUP);
    192c:	83 e0       	ldi	r24, 0x03	; 3
    192e:	61 e0       	ldi	r22, 0x01	; 1
    1930:	41 e0       	ldi	r20, 0x01	; 1
    1932:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R2, DIO_INPUT_PULLUP);
    1936:	83 e0       	ldi	r24, 0x03	; 3
    1938:	62 e0       	ldi	r22, 0x02	; 2
    193a:	41 e0       	ldi	r20, 0x01	; 1
    193c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_R3, DIO_INPUT_PULLUP);
    1940:	83 e0       	ldi	r24, 0x03	; 3
    1942:	63 e0       	ldi	r22, 0x03	; 3
    1944:	41 e0       	ldi	r20, 0x01	; 1
    1946:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    /* Set all columns to output */
    DIO_SetPinMode(KEYPAD_PIN_C0, DIO_OUTPUT);
    194a:	83 e0       	ldi	r24, 0x03	; 3
    194c:	64 e0       	ldi	r22, 0x04	; 4
    194e:	42 e0       	ldi	r20, 0x02	; 2
    1950:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C1, DIO_OUTPUT);
    1954:	83 e0       	ldi	r24, 0x03	; 3
    1956:	65 e0       	ldi	r22, 0x05	; 5
    1958:	42 e0       	ldi	r20, 0x02	; 2
    195a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C2, DIO_OUTPUT);
    195e:	83 e0       	ldi	r24, 0x03	; 3
    1960:	66 e0       	ldi	r22, 0x06	; 6
    1962:	42 e0       	ldi	r20, 0x02	; 2
    1964:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(KEYPAD_PIN_C3, DIO_OUTPUT);
    1968:	83 e0       	ldi	r24, 0x03	; 3
    196a:	67 e0       	ldi	r22, 0x07	; 7
    196c:	42 e0       	ldi	r20, 0x02	; 2
    196e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
}
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <Keypad_GetButtonState>:
	low  -> Pressed

*/


Keypad_StateType Keypad_GetButtonState(Keypad_ButtonType button) {
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	28 97       	sbiw	r28, 0x08	; 8
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    1992:	8c 81       	ldd	r24, Y+4	; 0x04
    1994:	86 95       	lsr	r24
    1996:	86 95       	lsr	r24
    1998:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	83 70       	andi	r24, 0x03	; 3
    199e:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    19a0:	83 e0       	ldi	r24, 0x03	; 3
    19a2:	64 e0       	ldi	r22, 0x04	; 4
    19a4:	41 e0       	ldi	r20, 0x01	; 1
    19a6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	65 e0       	ldi	r22, 0x05	; 5
    19ae:	41 e0       	ldi	r20, 0x01	; 1
    19b0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    19b4:	83 e0       	ldi	r24, 0x03	; 3
    19b6:	66 e0       	ldi	r22, 0x06	; 6
    19b8:	41 e0       	ldi	r20, 0x01	; 1
    19ba:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    19be:	83 e0       	ldi	r24, 0x03	; 3
    19c0:	67 e0       	ldi	r22, 0x07	; 7
    19c2:	41 e0       	ldi	r20, 0x01	; 1
    19c4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    switch (column)
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	38 87       	std	Y+8, r19	; 0x08
    19d0:	2f 83       	std	Y+7, r18	; 0x07
    19d2:	8f 81       	ldd	r24, Y+7	; 0x07
    19d4:	98 85       	ldd	r25, Y+8	; 0x08
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	91 05       	cpc	r25, r1
    19da:	d9 f0       	breq	.+54     	; 0x1a12 <Keypad_GetButtonState+0x9a>
    19dc:	2f 81       	ldd	r18, Y+7	; 0x07
    19de:	38 85       	ldd	r19, Y+8	; 0x08
    19e0:	22 30       	cpi	r18, 0x02	; 2
    19e2:	31 05       	cpc	r19, r1
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <Keypad_GetButtonState+0x78>
    19e6:	8f 81       	ldd	r24, Y+7	; 0x07
    19e8:	98 85       	ldd	r25, Y+8	; 0x08
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	61 f0       	breq	.+24     	; 0x1a06 <Keypad_GetButtonState+0x8e>
    19ee:	22 c0       	rjmp	.+68     	; 0x1a34 <Keypad_GetButtonState+0xbc>
    19f0:	2f 81       	ldd	r18, Y+7	; 0x07
    19f2:	38 85       	ldd	r19, Y+8	; 0x08
    19f4:	22 30       	cpi	r18, 0x02	; 2
    19f6:	31 05       	cpc	r19, r1
    19f8:	91 f0       	breq	.+36     	; 0x1a1e <Keypad_GetButtonState+0xa6>
    19fa:	8f 81       	ldd	r24, Y+7	; 0x07
    19fc:	98 85       	ldd	r25, Y+8	; 0x08
    19fe:	83 30       	cpi	r24, 0x03	; 3
    1a00:	91 05       	cpc	r25, r1
    1a02:	99 f0       	breq	.+38     	; 0x1a2a <Keypad_GetButtonState+0xb2>
    1a04:	17 c0       	rjmp	.+46     	; 0x1a34 <Keypad_GetButtonState+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    1a06:	83 e0       	ldi	r24, 0x03	; 3
    1a08:	64 e0       	ldi	r22, 0x04	; 4
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    1a10:	11 c0       	rjmp	.+34     	; 0x1a34 <Keypad_GetButtonState+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    1a12:	83 e0       	ldi	r24, 0x03	; 3
    1a14:	65 e0       	ldi	r22, 0x05	; 5
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    1a1c:	0b c0       	rjmp	.+22     	; 0x1a34 <Keypad_GetButtonState+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    1a1e:	83 e0       	ldi	r24, 0x03	; 3
    1a20:	66 e0       	ldi	r22, 0x06	; 6
    1a22:	40 e0       	ldi	r20, 0x00	; 0
    1a24:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    1a28:	05 c0       	rjmp	.+10     	; 0x1a34 <Keypad_GetButtonState+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    1a2a:	83 e0       	ldi	r24, 0x03	; 3
    1a2c:	67 e0       	ldi	r22, 0x07	; 7
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	3e 83       	std	Y+6, r19	; 0x06
    1a3c:	2d 83       	std	Y+5, r18	; 0x05
    1a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a40:	9e 81       	ldd	r25, Y+6	; 0x06
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	91 05       	cpc	r25, r1
    1a46:	e9 f0       	breq	.+58     	; 0x1a82 <Keypad_GetButtonState+0x10a>
    1a48:	2d 81       	ldd	r18, Y+5	; 0x05
    1a4a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a4c:	22 30       	cpi	r18, 0x02	; 2
    1a4e:	31 05       	cpc	r19, r1
    1a50:	2c f4       	brge	.+10     	; 0x1a5c <Keypad_GetButtonState+0xe4>
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	9e 81       	ldd	r25, Y+6	; 0x06
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	61 f0       	breq	.+24     	; 0x1a72 <Keypad_GetButtonState+0xfa>
    1a5a:	2a c0       	rjmp	.+84     	; 0x1ab0 <Keypad_GetButtonState+0x138>
    1a5c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a5e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a60:	22 30       	cpi	r18, 0x02	; 2
    1a62:	31 05       	cpc	r19, r1
    1a64:	b1 f0       	breq	.+44     	; 0x1a92 <Keypad_GetButtonState+0x11a>
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	83 30       	cpi	r24, 0x03	; 3
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	c9 f0       	breq	.+50     	; 0x1aa2 <Keypad_GetButtonState+0x12a>
    1a70:	1f c0       	rjmp	.+62     	; 0x1ab0 <Keypad_GetButtonState+0x138>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    1a72:	83 e0       	ldi	r24, 0x03	; 3
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	0e 94 95 0b 	call	0x172a	; 0x172a <DIO_ReadPinLevel>
    1a7a:	88 23       	and	r24, r24
    1a7c:	c9 f4       	brne	.+50     	; 0x1ab0 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    1a7e:	1b 82       	std	Y+3, r1	; 0x03
    1a80:	17 c0       	rjmp	.+46     	; 0x1ab0 <Keypad_GetButtonState+0x138>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    1a82:	83 e0       	ldi	r24, 0x03	; 3
    1a84:	61 e0       	ldi	r22, 0x01	; 1
    1a86:	0e 94 95 0b 	call	0x172a	; 0x172a <DIO_ReadPinLevel>
    1a8a:	88 23       	and	r24, r24
    1a8c:	89 f4       	brne	.+34     	; 0x1ab0 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    1a8e:	1b 82       	std	Y+3, r1	; 0x03
    1a90:	0f c0       	rjmp	.+30     	; 0x1ab0 <Keypad_GetButtonState+0x138>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    1a92:	83 e0       	ldi	r24, 0x03	; 3
    1a94:	62 e0       	ldi	r22, 0x02	; 2
    1a96:	0e 94 95 0b 	call	0x172a	; 0x172a <DIO_ReadPinLevel>
    1a9a:	88 23       	and	r24, r24
    1a9c:	49 f4       	brne	.+18     	; 0x1ab0 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    1a9e:	1b 82       	std	Y+3, r1	; 0x03
    1aa0:	07 c0       	rjmp	.+14     	; 0x1ab0 <Keypad_GetButtonState+0x138>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    1aa2:	83 e0       	ldi	r24, 0x03	; 3
    1aa4:	63 e0       	ldi	r22, 0x03	; 3
    1aa6:	0e 94 95 0b 	call	0x172a	; 0x172a <DIO_ReadPinLevel>
    1aaa:	88 23       	and	r24, r24
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <Keypad_GetButtonState+0x138>
            state = KEYPAD_STATE_PRESSED;
    1aae:	1b 82       	std	Y+3, r1	; 0x03
        }
        break;
    default:
        break;
    }
    return state;
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1ab2:	28 96       	adiw	r28, 0x08	; 8
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <Keypad_GetButtonStatePooling>:

Keypad_StateType Keypad_GetButtonStatePooling(Keypad_ButtonType button) {
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	28 97       	sbiw	r28, 0x08	; 8
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	8c 83       	std	Y+4, r24	; 0x04
    Keypad_StateType state = KEYPAD_STATE_NOT_PRESSED;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	8b 83       	std	Y+3, r24	; 0x03
    u8 row = button / 4;
    1ade:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae0:	86 95       	lsr	r24
    1ae2:	86 95       	lsr	r24
    1ae4:	8a 83       	std	Y+2, r24	; 0x02
    u8 column = button % 4;
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae8:	83 70       	andi	r24, 0x03	; 3
    1aea:	89 83       	std	Y+1, r24	; 0x01
    DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_HIGH);
    1aec:	83 e0       	ldi	r24, 0x03	; 3
    1aee:	64 e0       	ldi	r22, 0x04	; 4
    1af0:	41 e0       	ldi	r20, 0x01	; 1
    1af2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_HIGH);
    1af6:	83 e0       	ldi	r24, 0x03	; 3
    1af8:	65 e0       	ldi	r22, 0x05	; 5
    1afa:	41 e0       	ldi	r20, 0x01	; 1
    1afc:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_HIGH);
    1b00:	83 e0       	ldi	r24, 0x03	; 3
    1b02:	66 e0       	ldi	r22, 0x06	; 6
    1b04:	41 e0       	ldi	r20, 0x01	; 1
    1b06:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_HIGH);
    1b0a:	83 e0       	ldi	r24, 0x03	; 3
    1b0c:	67 e0       	ldi	r22, 0x07	; 7
    1b0e:	41 e0       	ldi	r20, 0x01	; 1
    1b10:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    switch (column)
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	38 87       	std	Y+8, r19	; 0x08
    1b1c:	2f 83       	std	Y+7, r18	; 0x07
    1b1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b20:	98 85       	ldd	r25, Y+8	; 0x08
    1b22:	81 30       	cpi	r24, 0x01	; 1
    1b24:	91 05       	cpc	r25, r1
    1b26:	d9 f0       	breq	.+54     	; 0x1b5e <Keypad_GetButtonStatePooling+0x9a>
    1b28:	2f 81       	ldd	r18, Y+7	; 0x07
    1b2a:	38 85       	ldd	r19, Y+8	; 0x08
    1b2c:	22 30       	cpi	r18, 0x02	; 2
    1b2e:	31 05       	cpc	r19, r1
    1b30:	2c f4       	brge	.+10     	; 0x1b3c <Keypad_GetButtonStatePooling+0x78>
    1b32:	8f 81       	ldd	r24, Y+7	; 0x07
    1b34:	98 85       	ldd	r25, Y+8	; 0x08
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	61 f0       	breq	.+24     	; 0x1b52 <Keypad_GetButtonStatePooling+0x8e>
    1b3a:	22 c0       	rjmp	.+68     	; 0x1b80 <Keypad_GetButtonStatePooling+0xbc>
    1b3c:	2f 81       	ldd	r18, Y+7	; 0x07
    1b3e:	38 85       	ldd	r19, Y+8	; 0x08
    1b40:	22 30       	cpi	r18, 0x02	; 2
    1b42:	31 05       	cpc	r19, r1
    1b44:	91 f0       	breq	.+36     	; 0x1b6a <Keypad_GetButtonStatePooling+0xa6>
    1b46:	8f 81       	ldd	r24, Y+7	; 0x07
    1b48:	98 85       	ldd	r25, Y+8	; 0x08
    1b4a:	83 30       	cpi	r24, 0x03	; 3
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	99 f0       	breq	.+38     	; 0x1b76 <Keypad_GetButtonStatePooling+0xb2>
    1b50:	17 c0       	rjmp	.+46     	; 0x1b80 <Keypad_GetButtonStatePooling+0xbc>
    {
    case 0:
        DIO_SetPinLevel(KEYPAD_PIN_C0, DIO_LOW);
    1b52:	83 e0       	ldi	r24, 0x03	; 3
    1b54:	64 e0       	ldi	r22, 0x04	; 4
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    1b5c:	11 c0       	rjmp	.+34     	; 0x1b80 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 1:
        DIO_SetPinLevel(KEYPAD_PIN_C1, DIO_LOW);
    1b5e:	83 e0       	ldi	r24, 0x03	; 3
    1b60:	65 e0       	ldi	r22, 0x05	; 5
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    1b68:	0b c0       	rjmp	.+22     	; 0x1b80 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 2:
        DIO_SetPinLevel(KEYPAD_PIN_C2, DIO_LOW);
    1b6a:	83 e0       	ldi	r24, 0x03	; 3
    1b6c:	66 e0       	ldi	r22, 0x06	; 6
    1b6e:	40 e0       	ldi	r20, 0x00	; 0
    1b70:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    1b74:	05 c0       	rjmp	.+10     	; 0x1b80 <Keypad_GetButtonStatePooling+0xbc>
        break;
    case 3:
        DIO_SetPinLevel(KEYPAD_PIN_C3, DIO_LOW);
    1b76:	83 e0       	ldi	r24, 0x03	; 3
    1b78:	67 e0       	ldi	r22, 0x07	; 7
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        break;
    default:
        break;
    }
    switch (row)
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	3e 83       	std	Y+6, r19	; 0x06
    1b88:	2d 83       	std	Y+5, r18	; 0x05
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	91 05       	cpc	r25, r1
    1b92:	19 f1       	breq	.+70     	; 0x1bda <Keypad_GetButtonStatePooling+0x116>
    1b94:	2d 81       	ldd	r18, Y+5	; 0x05
    1b96:	3e 81       	ldd	r19, Y+6	; 0x06
    1b98:	22 30       	cpi	r18, 0x02	; 2
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	2c f4       	brge	.+10     	; 0x1ba8 <Keypad_GetButtonStatePooling+0xe4>
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	61 f0       	breq	.+24     	; 0x1bbe <Keypad_GetButtonStatePooling+0xfa>
    1ba6:	42 c0       	rjmp	.+132    	; 0x1c2c <Keypad_GetButtonStatePooling+0x168>
    1ba8:	2d 81       	ldd	r18, Y+5	; 0x05
    1baa:	3e 81       	ldd	r19, Y+6	; 0x06
    1bac:	22 30       	cpi	r18, 0x02	; 2
    1bae:	31 05       	cpc	r19, r1
    1bb0:	11 f1       	breq	.+68     	; 0x1bf6 <Keypad_GetButtonStatePooling+0x132>
    1bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb6:	83 30       	cpi	r24, 0x03	; 3
    1bb8:	91 05       	cpc	r25, r1
    1bba:	59 f1       	breq	.+86     	; 0x1c12 <Keypad_GetButtonStatePooling+0x14e>
    1bbc:	37 c0       	rjmp	.+110    	; 0x1c2c <Keypad_GetButtonStatePooling+0x168>
    {
    case 0:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW) {
    1bbe:	83 e0       	ldi	r24, 0x03	; 3
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	0e 94 95 0b 	call	0x172a	; 0x172a <DIO_ReadPinLevel>
    1bc6:	88 23       	and	r24, r24
    1bc8:	89 f5       	brne	.+98     	; 0x1c2c <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    1bca:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R0) == DIO_LOW);
    1bcc:	83 e0       	ldi	r24, 0x03	; 3
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	0e 94 95 0b 	call	0x172a	; 0x172a <DIO_ReadPinLevel>
    1bd4:	88 23       	and	r24, r24
    1bd6:	d1 f3       	breq	.-12     	; 0x1bcc <Keypad_GetButtonStatePooling+0x108>
    1bd8:	29 c0       	rjmp	.+82     	; 0x1c2c <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 1:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW) {
    1bda:	83 e0       	ldi	r24, 0x03	; 3
    1bdc:	61 e0       	ldi	r22, 0x01	; 1
    1bde:	0e 94 95 0b 	call	0x172a	; 0x172a <DIO_ReadPinLevel>
    1be2:	88 23       	and	r24, r24
    1be4:	19 f5       	brne	.+70     	; 0x1c2c <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    1be6:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R1) == DIO_LOW);
    1be8:	83 e0       	ldi	r24, 0x03	; 3
    1bea:	61 e0       	ldi	r22, 0x01	; 1
    1bec:	0e 94 95 0b 	call	0x172a	; 0x172a <DIO_ReadPinLevel>
    1bf0:	88 23       	and	r24, r24
    1bf2:	d1 f3       	breq	.-12     	; 0x1be8 <Keypad_GetButtonStatePooling+0x124>
    1bf4:	1b c0       	rjmp	.+54     	; 0x1c2c <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 2:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW) {
    1bf6:	83 e0       	ldi	r24, 0x03	; 3
    1bf8:	62 e0       	ldi	r22, 0x02	; 2
    1bfa:	0e 94 95 0b 	call	0x172a	; 0x172a <DIO_ReadPinLevel>
    1bfe:	88 23       	and	r24, r24
    1c00:	a9 f4       	brne	.+42     	; 0x1c2c <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    1c02:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R2) == DIO_LOW);
    1c04:	83 e0       	ldi	r24, 0x03	; 3
    1c06:	62 e0       	ldi	r22, 0x02	; 2
    1c08:	0e 94 95 0b 	call	0x172a	; 0x172a <DIO_ReadPinLevel>
    1c0c:	88 23       	and	r24, r24
    1c0e:	d1 f3       	breq	.-12     	; 0x1c04 <Keypad_GetButtonStatePooling+0x140>
    1c10:	0d c0       	rjmp	.+26     	; 0x1c2c <Keypad_GetButtonStatePooling+0x168>
        }
        break;
    case 3:
        if (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW) {
    1c12:	83 e0       	ldi	r24, 0x03	; 3
    1c14:	63 e0       	ldi	r22, 0x03	; 3
    1c16:	0e 94 95 0b 	call	0x172a	; 0x172a <DIO_ReadPinLevel>
    1c1a:	88 23       	and	r24, r24
    1c1c:	39 f4       	brne	.+14     	; 0x1c2c <Keypad_GetButtonStatePooling+0x168>
            state = KEYPAD_STATE_PRESSED;
    1c1e:	1b 82       	std	Y+3, r1	; 0x03
            while (DIO_ReadPinLevel(KEYPAD_PIN_R3) == DIO_LOW);
    1c20:	83 e0       	ldi	r24, 0x03	; 3
    1c22:	63 e0       	ldi	r22, 0x03	; 3
    1c24:	0e 94 95 0b 	call	0x172a	; 0x172a <DIO_ReadPinLevel>
    1c28:	88 23       	and	r24, r24
    1c2a:	d1 f3       	breq	.-12     	; 0x1c20 <Keypad_GetButtonStatePooling+0x15c>
        }
        break;
    default:
        break;
    }
    return state;
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c2e:	28 96       	adiw	r28, 0x08	; 8
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <Keypad_GetPressedButton>:


Keypad_ButtonType Keypad_GetPressedButton(void) {
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <Keypad_GetPressedButton+0x6>
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    u8 i=0;
    1c4a:	1a 82       	std	Y+2, r1	; 0x02
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    1c4c:	80 e1       	ldi	r24, 0x10	; 16
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    for (i=0; i<16; i++) {
    1c50:	1a 82       	std	Y+2, r1	; 0x02
    1c52:	0b c0       	rjmp	.+22     	; 0x1c6a <Keypad_GetPressedButton+0x2a>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <Keypad_GetButtonStatePooling>
    1c5a:	88 23       	and	r24, r24
    1c5c:	19 f4       	brne	.+6      	; 0x1c64 <Keypad_GetPressedButton+0x24>
            pressed_button = i;
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	06 c0       	rjmp	.+12     	; 0x1c70 <Keypad_GetPressedButton+0x30>


Keypad_ButtonType Keypad_GetPressedButton(void) {
    u8 i=0;
    Keypad_ButtonType pressed_button = KEYPAD_BUTTON_INVALID;
    for (i=0; i<16; i++) {
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	8f 5f       	subi	r24, 0xFF	; 255
    1c68:	8a 83       	std	Y+2, r24	; 0x02
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	80 31       	cpi	r24, 0x10	; 16
    1c6e:	90 f3       	brcs	.-28     	; 0x1c54 <Keypad_GetPressedButton+0x14>
        if (Keypad_GetButtonStatePooling(i) == KEYPAD_STATE_PRESSED) {
            pressed_button = i;
            break;
        }
    }
    return pressed_button;
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <LCD_Init>:

static void LCD_SendData(u8 data);
static void LCD_SendCommand(u8 command);
static void LCD_InitPinsMode(void);

void LCD_Init(void) {
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	2f 97       	sbiw	r28, 0x0f	; 15
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    u8 command = 0;
    1c90:	1f 86       	std	Y+15, r1	; 0x0f
    LCD_InitPinsMode();
    1c92:	0e 94 cc 11 	call	0x2398	; 0x2398 <LCD_InitPinsMode>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	a0 ef       	ldi	r26, 0xF0	; 240
    1c9c:	b1 e4       	ldi	r27, 0x41	; 65
    1c9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ca0:	9c 87       	std	Y+12, r25	; 0x0c
    1ca2:	ad 87       	std	Y+13, r26	; 0x0d
    1ca4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	4a ef       	ldi	r20, 0xFA	; 250
    1cb4:	54 e4       	ldi	r21, 0x44	; 68
    1cb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	8f 83       	std	Y+7, r24	; 0x07
    1cc0:	98 87       	std	Y+8, r25	; 0x08
    1cc2:	a9 87       	std	Y+9, r26	; 0x09
    1cc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc8:	78 85       	ldd	r23, Y+8	; 0x08
    1cca:	89 85       	ldd	r24, Y+9	; 0x09
    1ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e8       	ldi	r20, 0x80	; 128
    1cd4:	5f e3       	ldi	r21, 0x3F	; 63
    1cd6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <LCD_Init+0x6c>
		__ticks = 1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9e 83       	std	Y+6, r25	; 0x06
    1ce4:	8d 83       	std	Y+5, r24	; 0x05
    1ce6:	3f c0       	rjmp	.+126    	; 0x1d66 <LCD_Init+0xea>
	else if (__tmp > 65535)
    1ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cea:	78 85       	ldd	r23, Y+8	; 0x08
    1cec:	89 85       	ldd	r24, Y+9	; 0x09
    1cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	3f ef       	ldi	r19, 0xFF	; 255
    1cf4:	4f e7       	ldi	r20, 0x7F	; 127
    1cf6:	57 e4       	ldi	r21, 0x47	; 71
    1cf8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cfc:	18 16       	cp	r1, r24
    1cfe:	4c f5       	brge	.+82     	; 0x1d52 <LCD_Init+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e2       	ldi	r20, 0x20	; 32
    1d0e:	51 e4       	ldi	r21, 0x41	; 65
    1d10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <LCD_Init+0xcc>
    1d2a:	88 ec       	ldi	r24, 0xC8	; 200
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9c 83       	std	Y+4, r25	; 0x04
    1d30:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <LCD_Init+0xba>
    1d3a:	9c 83       	std	Y+4, r25	; 0x04
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	69 f7       	brne	.-38     	; 0x1d2a <LCD_Init+0xae>
    1d50:	14 c0       	rjmp	.+40     	; 0x1d7a <LCD_Init+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d52:	6f 81       	ldd	r22, Y+7	; 0x07
    1d54:	78 85       	ldd	r23, Y+8	; 0x08
    1d56:	89 85       	ldd	r24, Y+9	; 0x09
    1d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	9a 83       	std	Y+2, r25	; 0x02
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <LCD_Init+0xf6>
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01

    /* Function Set:
        N: 1 (two lines)
        F: 0 (5x7)
    */
    command = 0b00110000;
    1d7a:	80 e3       	ldi	r24, 0x30	; 48
    1d7c:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_LINES == LCD_TWO_LINES)
        SET_BIT(command, 3);
    1d7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d80:	88 60       	ori	r24, 0x08	; 8
    1d82:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_DOTS == LCD_DOTS_5X10)
        SET_BIT(command, 2);
    1d84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d86:	84 60       	ori	r24, 0x04	; 4
    1d88:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    1d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_SendCommand>
    /* Display ON/OFF
        D: 1 (Display ON)
        C: 0 (Cursor off)
        B: 0 (Cursor not blink)
    */
    command = 0b00001000;
    1d90:	88 e0       	ldi	r24, 0x08	; 8
    1d92:	8f 87       	std	Y+15, r24	; 0x0f
    #if (LCD_MODE_DISPLAY == LCD_DISPLAY_ON)
        SET_BIT(command, 2);
    1d94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d96:	84 60       	ori	r24, 0x04	; 4
    1d98:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_BLINK)
        SET_BIT(command, 0);
    1d9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9c:	81 60       	ori	r24, 0x01	; 1
    1d9e:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(command, 1);
    1da0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1da2:	82 60       	ori	r24, 0x02	; 2
    1da4:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    #if (LCD_MODE_CURSOR == LCD_CURSOR_ON_NO_BLINK)
        SET_BIT(command, 1);
    1da6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1da8:	82 60       	ori	r24, 0x02	; 2
    1daa:	8f 87       	std	Y+15, r24	; 0x0f
    #endif
    LCD_SendCommand(command);
    1dac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dae:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_SendCommand>

    /* Display Clear */
    LCD_SendCommand(0b00000001);
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_SendCommand>
}
    1db8:	2f 96       	adiw	r28, 0x0f	; 15
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	cf 91       	pop	r28
    1dc6:	df 91       	pop	r29
    1dc8:	08 95       	ret

00001dca <LCD_Clear>:


void LCD_Clear (void) {
    1dca:	df 93       	push	r29
    1dcc:	cf 93       	push	r28
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(0b00000001);
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_SendCommand>
}
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <LCD_DisplayCharacter>:

void LCD_DisplayCharacter (u8 data) {
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	0f 92       	push	r0
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <LCD_SendData>
}
    1df0:	0f 90       	pop	r0
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <LCD_DisplayString>:

void LCD_DisplayString (u8 *str) {
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <LCD_DisplayString+0x6>
    1dfe:	0f 92       	push	r0
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	9b 83       	std	Y+3, r25	; 0x03
    1e06:	8a 83       	std	Y+2, r24	; 0x02
    u8 i=0;
    1e08:	19 82       	std	Y+1, r1	; 0x01
    1e0a:	0e c0       	rjmp	.+28     	; 0x1e28 <LCD_DisplayString+0x30>
    while(str[i] != '\0') {
        LCD_DisplayCharacter(str[i]);
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	9b 81       	ldd	r25, Y+3	; 0x03
    1e16:	fc 01       	movw	r30, r24
    1e18:	e2 0f       	add	r30, r18
    1e1a:	f3 1f       	adc	r31, r19
    1e1c:	80 81       	ld	r24, Z
    1e1e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <LCD_DisplayCharacter>
        i++;
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	8f 5f       	subi	r24, 0xFF	; 255
    1e26:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendData(data);
}

void LCD_DisplayString (u8 *str) {
    u8 i=0;
    while(str[i] != '\0') {
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	9b 81       	ldd	r25, Y+3	; 0x03
    1e32:	fc 01       	movw	r30, r24
    1e34:	e2 0f       	add	r30, r18
    1e36:	f3 1f       	adc	r31, r19
    1e38:	80 81       	ld	r24, Z
    1e3a:	88 23       	and	r24, r24
    1e3c:	39 f7       	brne	.-50     	; 0x1e0c <LCD_DisplayString+0x14>
        LCD_DisplayCharacter(str[i]);
        i++;
    }
}
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	08 95       	ret

00001e4a <LCD_SetCursorPosition>:

void LCD_SetCursorPosition(u8 row, u8 column) {
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <LCD_SetCursorPosition+0x6>
    1e50:	0f 92       	push	r0
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	8a 83       	std	Y+2, r24	; 0x02
    1e58:	6b 83       	std	Y+3, r22	; 0x03
    u8 address = column + row*0x40;
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	88 2f       	mov	r24, r24
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	00 24       	eor	r0, r0
    1e62:	96 95       	lsr	r25
    1e64:	87 95       	ror	r24
    1e66:	07 94       	ror	r0
    1e68:	96 95       	lsr	r25
    1e6a:	87 95       	ror	r24
    1e6c:	07 94       	ror	r0
    1e6e:	98 2f       	mov	r25, r24
    1e70:	80 2d       	mov	r24, r0
    1e72:	98 2f       	mov	r25, r24
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	89 0f       	add	r24, r25
    1e78:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	80 68       	ori	r24, 0x80	; 128
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    LCD_SendCommand(address);
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_SendCommand>
}
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret

00001e92 <LCD_DisplayNumber>:


void LCD_DisplayNumber (s32 number) {
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <LCD_DisplayNumber+0x6>
    1e98:	00 d0       	rcall	.+0      	; 0x1e9a <LCD_DisplayNumber+0x8>
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <LCD_DisplayNumber+0xa>
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	9e 83       	std	Y+6, r25	; 0x06
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
    u32 reversed_number = 0;
    1ea4:	1c 82       	std	Y+4, r1	; 0x04
    1ea6:	1b 82       	std	Y+3, r1	; 0x03
    u8 digits = 0;
    1ea8:	1a 82       	std	Y+2, r1	; 0x02
    if (number < 0) {
    1eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1eac:	9e 81       	ldd	r25, Y+6	; 0x06
    1eae:	99 23       	and	r25, r25
    1eb0:	5c f4       	brge	.+22     	; 0x1ec8 <LCD_DisplayNumber+0x36>
        number = number*-1;
    1eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb6:	90 95       	com	r25
    1eb8:	81 95       	neg	r24
    1eba:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebc:	9e 83       	std	Y+6, r25	; 0x06
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
        LCD_DisplayCharacter('-');
    1ec0:	8d e2       	ldi	r24, 0x2D	; 45
    1ec2:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <LCD_DisplayCharacter>
    1ec6:	2d c0       	rjmp	.+90     	; 0x1f22 <LCD_DisplayNumber+0x90>
    }
    else if (number == 0) {
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	49 f5       	brne	.+82     	; 0x1f22 <LCD_DisplayNumber+0x90>
        LCD_DisplayCharacter('0');
    1ed0:	80 e3       	ldi	r24, 0x30	; 48
    1ed2:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <LCD_DisplayCharacter>
    1ed6:	25 c0       	rjmp	.+74     	; 0x1f22 <LCD_DisplayNumber+0x90>
    }
    while (number != 0)
    {
        reversed_number = (reversed_number*10) + (number%10);
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	9c 01       	movw	r18, r24
    1ede:	22 0f       	add	r18, r18
    1ee0:	33 1f       	adc	r19, r19
    1ee2:	c9 01       	movw	r24, r18
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	f9 01       	movw	r30, r18
    1eee:	e8 0f       	add	r30, r24
    1ef0:	f9 1f       	adc	r31, r25
    1ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef6:	2a e0       	ldi	r18, 0x0A	; 10
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	b9 01       	movw	r22, r18
    1efc:	0e 94 06 19 	call	0x320c	; 0x320c <__divmodhi4>
    1f00:	8e 0f       	add	r24, r30
    1f02:	9f 1f       	adc	r25, r31
    1f04:	9c 83       	std	Y+4, r25	; 0x04
    1f06:	8b 83       	std	Y+3, r24	; 0x03
        number = number / 10;
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0c:	2a e0       	ldi	r18, 0x0A	; 10
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	b9 01       	movw	r22, r18
    1f12:	0e 94 06 19 	call	0x320c	; 0x320c <__divmodhi4>
    1f16:	cb 01       	movw	r24, r22
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
        digits++;
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	8f 5f       	subi	r24, 0xFF	; 255
    1f20:	8a 83       	std	Y+2, r24	; 0x02
        LCD_DisplayCharacter('-');
    }
    else if (number == 0) {
        LCD_DisplayCharacter('0');
    }
    while (number != 0)
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	b9 f6       	brne	.-82     	; 0x1ed8 <LCD_DisplayNumber+0x46>
    1f2a:	1b c0       	rjmp	.+54     	; 0x1f62 <LCD_DisplayNumber+0xd0>
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    {
        u8 data = reversed_number % 10;
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	2a e0       	ldi	r18, 0x0A	; 10
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	b9 01       	movw	r22, r18
    1f36:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <__udivmodhi4>
    1f3a:	89 83       	std	Y+1, r24	; 0x01
        data = data + '0';
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	80 5d       	subi	r24, 0xD0	; 208
    1f40:	89 83       	std	Y+1, r24	; 0x01
        LCD_DisplayCharacter(data);
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <LCD_DisplayCharacter>
        reversed_number = reversed_number / 10;
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4c:	2a e0       	ldi	r18, 0x0A	; 10
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	b9 01       	movw	r22, r18
    1f52:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <__udivmodhi4>
    1f56:	cb 01       	movw	r24, r22
    1f58:	9c 83       	std	Y+4, r25	; 0x04
    1f5a:	8b 83       	std	Y+3, r24	; 0x03
        digits--;
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	81 50       	subi	r24, 0x01	; 1
    1f60:	8a 83       	std	Y+2, r24	; 0x02
    {
        reversed_number = (reversed_number*10) + (number%10);
        number = number / 10;
        digits++;
    }
    while (reversed_number != 0)
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	9c 81       	ldd	r25, Y+4	; 0x04
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	09 f7       	brne	.-62     	; 0x1f2c <LCD_DisplayNumber+0x9a>
    1f6a:	06 c0       	rjmp	.+12     	; 0x1f78 <LCD_DisplayNumber+0xe6>
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
        LCD_DisplayCharacter('0');
    1f6c:	80 e3       	ldi	r24, 0x30	; 48
    1f6e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <LCD_DisplayCharacter>
        digits--;
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	81 50       	subi	r24, 0x01	; 1
    1f76:	8a 83       	std	Y+2, r24	; 0x02
        data = data + '0';
        LCD_DisplayCharacter(data);
        reversed_number = reversed_number / 10;
        digits--;
    }
    while (digits != 0) {
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	88 23       	and	r24, r24
    1f7c:	b9 f7       	brne	.-18     	; 0x1f6c <LCD_DisplayNumber+0xda>
        LCD_DisplayCharacter('0');
        digits--;
    }

}
    1f7e:	26 96       	adiw	r28, 0x06	; 6
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <LCD_ShiftLeft>:

void LCD_ShiftLeft (u8 counter) {
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <LCD_ShiftLeft+0x6>
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    1f9c:	19 82       	std	Y+1, r1	; 0x01
    1f9e:	06 c0       	rjmp	.+12     	; 0x1fac <LCD_ShiftLeft+0x1c>
        LCD_SendCommand(0b00011000);
    1fa0:	88 e1       	ldi	r24, 0x18	; 24
    1fa2:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_SendCommand>

}

void LCD_ShiftLeft (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	8f 5f       	subi	r24, 0xFF	; 255
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	99 81       	ldd	r25, Y+1	; 0x01
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	98 17       	cp	r25, r24
    1fb2:	b0 f3       	brcs	.-20     	; 0x1fa0 <LCD_ShiftLeft+0x10>
        LCD_SendCommand(0b00011000);
    }
}
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <LCD_ShiftRight>:
void LCD_ShiftRight (u8 counter) {
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <LCD_ShiftRight+0x6>
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    1fca:	19 82       	std	Y+1, r1	; 0x01
    1fcc:	06 c0       	rjmp	.+12     	; 0x1fda <LCD_ShiftRight+0x1c>
        LCD_SendCommand(0b00011100);
    1fce:	8c e1       	ldi	r24, 0x1C	; 28
    1fd0:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_SendCommand>
        LCD_SendCommand(0b00011000);
    }
}
void LCD_ShiftRight (u8 counter) {
    u8 i;
    for (i=0; i<counter; i++) {
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	8f 5f       	subi	r24, 0xFF	; 255
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	99 81       	ldd	r25, Y+1	; 0x01
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	98 17       	cp	r25, r24
    1fe0:	b0 f3       	brcs	.-20     	; 0x1fce <LCD_ShiftRight+0x10>
        LCD_SendCommand(0b00011100);
    }
}
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <LCD_SendCommand>:

static void LCD_SendCommand(u8 command) {
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	2f 97       	sbiw	r28, 0x0f	; 15
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	de bf       	out	0x3e, r29	; 62
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	cd bf       	out	0x3d, r28	; 61
    2000:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 0 Command
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_LOW);
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	62 e0       	ldi	r22, 0x02	; 2
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	61 e0       	ldi	r22, 0x01	; 1
    2010:	40 e0       	ldi	r20, 0x00	; 0
    2012:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>

    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(command, 0));
    2016:	8f 85       	ldd	r24, Y+15	; 0x0f
    2018:	98 2f       	mov	r25, r24
    201a:	91 70       	andi	r25, 0x01	; 1
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	67 e0       	ldi	r22, 0x07	; 7
    2020:	49 2f       	mov	r20, r25
    2022:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(command, 1));
    2026:	8f 85       	ldd	r24, Y+15	; 0x0f
    2028:	86 95       	lsr	r24
    202a:	98 2f       	mov	r25, r24
    202c:	91 70       	andi	r25, 0x01	; 1
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	66 e0       	ldi	r22, 0x06	; 6
    2032:	49 2f       	mov	r20, r25
    2034:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(command, 2));
    2038:	8f 85       	ldd	r24, Y+15	; 0x0f
    203a:	86 95       	lsr	r24
    203c:	86 95       	lsr	r24
    203e:	98 2f       	mov	r25, r24
    2040:	91 70       	andi	r25, 0x01	; 1
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	65 e0       	ldi	r22, 0x05	; 5
    2046:	49 2f       	mov	r20, r25
    2048:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(command, 3));
    204c:	8f 85       	ldd	r24, Y+15	; 0x0f
    204e:	86 95       	lsr	r24
    2050:	86 95       	lsr	r24
    2052:	86 95       	lsr	r24
    2054:	98 2f       	mov	r25, r24
    2056:	91 70       	andi	r25, 0x01	; 1
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	64 e0       	ldi	r22, 0x04	; 4
    205c:	49 2f       	mov	r20, r25
    205e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(command, 4));
    2062:	8f 85       	ldd	r24, Y+15	; 0x0f
    2064:	82 95       	swap	r24
    2066:	8f 70       	andi	r24, 0x0F	; 15
    2068:	98 2f       	mov	r25, r24
    206a:	91 70       	andi	r25, 0x01	; 1
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	63 e0       	ldi	r22, 0x03	; 3
    2070:	49 2f       	mov	r20, r25
    2072:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(command, 5));
    2076:	8f 85       	ldd	r24, Y+15	; 0x0f
    2078:	82 95       	swap	r24
    207a:	86 95       	lsr	r24
    207c:	87 70       	andi	r24, 0x07	; 7
    207e:	98 2f       	mov	r25, r24
    2080:	91 70       	andi	r25, 0x01	; 1
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	62 e0       	ldi	r22, 0x02	; 2
    2086:	49 2f       	mov	r20, r25
    2088:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(command, 6));
    208c:	8f 85       	ldd	r24, Y+15	; 0x0f
    208e:	82 95       	swap	r24
    2090:	86 95       	lsr	r24
    2092:	86 95       	lsr	r24
    2094:	83 70       	andi	r24, 0x03	; 3
    2096:	98 2f       	mov	r25, r24
    2098:	91 70       	andi	r25, 0x01	; 1
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	61 e0       	ldi	r22, 0x01	; 1
    209e:	49 2f       	mov	r20, r25
    20a0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(command, 7));
    20a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a6:	98 2f       	mov	r25, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	99 27       	eor	r25, r25
    20ac:	99 1f       	adc	r25, r25
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	49 2f       	mov	r20, r25
    20b4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	60 e0       	ldi	r22, 0x00	; 0
    20bc:	41 e0       	ldi	r20, 0x01	; 1
    20be:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	a0 e0       	ldi	r26, 0x00	; 0
    20c8:	b0 e4       	ldi	r27, 0x40	; 64
    20ca:	8b 87       	std	Y+11, r24	; 0x0b
    20cc:	9c 87       	std	Y+12, r25	; 0x0c
    20ce:	ad 87       	std	Y+13, r26	; 0x0d
    20d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	4a ef       	ldi	r20, 0xFA	; 250
    20e0:	54 e4       	ldi	r21, 0x44	; 68
    20e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	8f 83       	std	Y+7, r24	; 0x07
    20ec:	98 87       	std	Y+8, r25	; 0x08
    20ee:	a9 87       	std	Y+9, r26	; 0x09
    20f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20f2:	6f 81       	ldd	r22, Y+7	; 0x07
    20f4:	78 85       	ldd	r23, Y+8	; 0x08
    20f6:	89 85       	ldd	r24, Y+9	; 0x09
    20f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e8       	ldi	r20, 0x80	; 128
    2100:	5f e3       	ldi	r21, 0x3F	; 63
    2102:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2106:	88 23       	and	r24, r24
    2108:	2c f4       	brge	.+10     	; 0x2114 <LCD_SendCommand+0x128>
		__ticks = 1;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	9e 83       	std	Y+6, r25	; 0x06
    2110:	8d 83       	std	Y+5, r24	; 0x05
    2112:	3f c0       	rjmp	.+126    	; 0x2192 <LCD_SendCommand+0x1a6>
	else if (__tmp > 65535)
    2114:	6f 81       	ldd	r22, Y+7	; 0x07
    2116:	78 85       	ldd	r23, Y+8	; 0x08
    2118:	89 85       	ldd	r24, Y+9	; 0x09
    211a:	9a 85       	ldd	r25, Y+10	; 0x0a
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	3f ef       	ldi	r19, 0xFF	; 255
    2120:	4f e7       	ldi	r20, 0x7F	; 127
    2122:	57 e4       	ldi	r21, 0x47	; 71
    2124:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2128:	18 16       	cp	r1, r24
    212a:	4c f5       	brge	.+82     	; 0x217e <LCD_SendCommand+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212c:	6b 85       	ldd	r22, Y+11	; 0x0b
    212e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2130:	8d 85       	ldd	r24, Y+13	; 0x0d
    2132:	9e 85       	ldd	r25, Y+14	; 0x0e
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e2       	ldi	r20, 0x20	; 32
    213a:	51 e4       	ldi	r21, 0x41	; 65
    213c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	bc 01       	movw	r22, r24
    2146:	cd 01       	movw	r24, r26
    2148:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	9e 83       	std	Y+6, r25	; 0x06
    2152:	8d 83       	std	Y+5, r24	; 0x05
    2154:	0f c0       	rjmp	.+30     	; 0x2174 <LCD_SendCommand+0x188>
    2156:	88 ec       	ldi	r24, 0xC8	; 200
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	9c 83       	std	Y+4, r25	; 0x04
    215c:	8b 83       	std	Y+3, r24	; 0x03
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	9c 81       	ldd	r25, Y+4	; 0x04
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	f1 f7       	brne	.-4      	; 0x2162 <LCD_SendCommand+0x176>
    2166:	9c 83       	std	Y+4, r25	; 0x04
    2168:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216a:	8d 81       	ldd	r24, Y+5	; 0x05
    216c:	9e 81       	ldd	r25, Y+6	; 0x06
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	9e 83       	std	Y+6, r25	; 0x06
    2172:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2174:	8d 81       	ldd	r24, Y+5	; 0x05
    2176:	9e 81       	ldd	r25, Y+6	; 0x06
    2178:	00 97       	sbiw	r24, 0x00	; 0
    217a:	69 f7       	brne	.-38     	; 0x2156 <LCD_SendCommand+0x16a>
    217c:	14 c0       	rjmp	.+40     	; 0x21a6 <LCD_SendCommand+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217e:	6f 81       	ldd	r22, Y+7	; 0x07
    2180:	78 85       	ldd	r23, Y+8	; 0x08
    2182:	89 85       	ldd	r24, Y+9	; 0x09
    2184:	9a 85       	ldd	r25, Y+10	; 0x0a
    2186:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	9e 83       	std	Y+6, r25	; 0x06
    2190:	8d 83       	std	Y+5, r24	; 0x05
    2192:	8d 81       	ldd	r24, Y+5	; 0x05
    2194:	9e 81       	ldd	r25, Y+6	; 0x06
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	89 83       	std	Y+1, r24	; 0x01
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	9a 81       	ldd	r25, Y+2	; 0x02
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <LCD_SendCommand+0x1b2>
    21a2:	9a 83       	std	Y+2, r25	; 0x02
    21a4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
}
    21b0:	2f 96       	adiw	r28, 0x0f	; 15
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <LCD_SendData>:

static void LCD_SendData(u8 data) {
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	2f 97       	sbiw	r28, 0x0f	; 15
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set Control Pins:
        RS : 1 Data
        RW : 0 Write
    */
    DIO_SetPinLevel(LCD_PIN_RS, DIO_HIGH);
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	62 e0       	ldi	r22, 0x02	; 2
    21dc:	41 e0       	ldi	r20, 0x01	; 1
    21de:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_RW, DIO_LOW);
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	61 e0       	ldi	r22, 0x01	; 1
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>

    /* Set Data Pins */
    DIO_SetPinLevel(LCD_PIN_D0, GET_BIT(data, 0));
    21ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ee:	98 2f       	mov	r25, r24
    21f0:	91 70       	andi	r25, 0x01	; 1
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	67 e0       	ldi	r22, 0x07	; 7
    21f6:	49 2f       	mov	r20, r25
    21f8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D1, GET_BIT(data, 1));
    21fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21fe:	86 95       	lsr	r24
    2200:	98 2f       	mov	r25, r24
    2202:	91 70       	andi	r25, 0x01	; 1
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	66 e0       	ldi	r22, 0x06	; 6
    2208:	49 2f       	mov	r20, r25
    220a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D2, GET_BIT(data, 2));
    220e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2210:	86 95       	lsr	r24
    2212:	86 95       	lsr	r24
    2214:	98 2f       	mov	r25, r24
    2216:	91 70       	andi	r25, 0x01	; 1
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	65 e0       	ldi	r22, 0x05	; 5
    221c:	49 2f       	mov	r20, r25
    221e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D3, GET_BIT(data, 3));
    2222:	8f 85       	ldd	r24, Y+15	; 0x0f
    2224:	86 95       	lsr	r24
    2226:	86 95       	lsr	r24
    2228:	86 95       	lsr	r24
    222a:	98 2f       	mov	r25, r24
    222c:	91 70       	andi	r25, 0x01	; 1
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	64 e0       	ldi	r22, 0x04	; 4
    2232:	49 2f       	mov	r20, r25
    2234:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D4, GET_BIT(data, 4));
    2238:	8f 85       	ldd	r24, Y+15	; 0x0f
    223a:	82 95       	swap	r24
    223c:	8f 70       	andi	r24, 0x0F	; 15
    223e:	98 2f       	mov	r25, r24
    2240:	91 70       	andi	r25, 0x01	; 1
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	63 e0       	ldi	r22, 0x03	; 3
    2246:	49 2f       	mov	r20, r25
    2248:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D5, GET_BIT(data, 5));
    224c:	8f 85       	ldd	r24, Y+15	; 0x0f
    224e:	82 95       	swap	r24
    2250:	86 95       	lsr	r24
    2252:	87 70       	andi	r24, 0x07	; 7
    2254:	98 2f       	mov	r25, r24
    2256:	91 70       	andi	r25, 0x01	; 1
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	62 e0       	ldi	r22, 0x02	; 2
    225c:	49 2f       	mov	r20, r25
    225e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D6, GET_BIT(data, 6));
    2262:	8f 85       	ldd	r24, Y+15	; 0x0f
    2264:	82 95       	swap	r24
    2266:	86 95       	lsr	r24
    2268:	86 95       	lsr	r24
    226a:	83 70       	andi	r24, 0x03	; 3
    226c:	98 2f       	mov	r25, r24
    226e:	91 70       	andi	r25, 0x01	; 1
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	61 e0       	ldi	r22, 0x01	; 1
    2274:	49 2f       	mov	r20, r25
    2276:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    DIO_SetPinLevel(LCD_PIN_D7, GET_BIT(data, 7));
    227a:	8f 85       	ldd	r24, Y+15	; 0x0f
    227c:	98 2f       	mov	r25, r24
    227e:	99 1f       	adc	r25, r25
    2280:	99 27       	eor	r25, r25
    2282:	99 1f       	adc	r25, r25
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	60 e0       	ldi	r22, 0x00	; 0
    2288:	49 2f       	mov	r20, r25
    228a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>

    DIO_SetPinLevel(LCD_PIN_E, DIO_HIGH);
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	41 e0       	ldi	r20, 0x01	; 1
    2294:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	a0 e0       	ldi	r26, 0x00	; 0
    229e:	b0 e4       	ldi	r27, 0x40	; 64
    22a0:	8b 87       	std	Y+11, r24	; 0x0b
    22a2:	9c 87       	std	Y+12, r25	; 0x0c
    22a4:	ad 87       	std	Y+13, r26	; 0x0d
    22a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	4a ef       	ldi	r20, 0xFA	; 250
    22b6:	54 e4       	ldi	r21, 0x44	; 68
    22b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	8f 83       	std	Y+7, r24	; 0x07
    22c2:	98 87       	std	Y+8, r25	; 0x08
    22c4:	a9 87       	std	Y+9, r26	; 0x09
    22c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22c8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ca:	78 85       	ldd	r23, Y+8	; 0x08
    22cc:	89 85       	ldd	r24, Y+9	; 0x09
    22ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e8       	ldi	r20, 0x80	; 128
    22d6:	5f e3       	ldi	r21, 0x3F	; 63
    22d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22dc:	88 23       	and	r24, r24
    22de:	2c f4       	brge	.+10     	; 0x22ea <LCD_SendData+0x128>
		__ticks = 1;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	9e 83       	std	Y+6, r25	; 0x06
    22e6:	8d 83       	std	Y+5, r24	; 0x05
    22e8:	3f c0       	rjmp	.+126    	; 0x2368 <LCD_SendData+0x1a6>
	else if (__tmp > 65535)
    22ea:	6f 81       	ldd	r22, Y+7	; 0x07
    22ec:	78 85       	ldd	r23, Y+8	; 0x08
    22ee:	89 85       	ldd	r24, Y+9	; 0x09
    22f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	3f ef       	ldi	r19, 0xFF	; 255
    22f6:	4f e7       	ldi	r20, 0x7F	; 127
    22f8:	57 e4       	ldi	r21, 0x47	; 71
    22fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22fe:	18 16       	cp	r1, r24
    2300:	4c f5       	brge	.+82     	; 0x2354 <LCD_SendData+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2302:	6b 85       	ldd	r22, Y+11	; 0x0b
    2304:	7c 85       	ldd	r23, Y+12	; 0x0c
    2306:	8d 85       	ldd	r24, Y+13	; 0x0d
    2308:	9e 85       	ldd	r25, Y+14	; 0x0e
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e2       	ldi	r20, 0x20	; 32
    2310:	51 e4       	ldi	r21, 0x41	; 65
    2312:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9e 83       	std	Y+6, r25	; 0x06
    2328:	8d 83       	std	Y+5, r24	; 0x05
    232a:	0f c0       	rjmp	.+30     	; 0x234a <LCD_SendData+0x188>
    232c:	88 ec       	ldi	r24, 0xC8	; 200
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	9c 83       	std	Y+4, r25	; 0x04
    2332:	8b 83       	std	Y+3, r24	; 0x03
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	9c 81       	ldd	r25, Y+4	; 0x04
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_SendData+0x176>
    233c:	9c 83       	std	Y+4, r25	; 0x04
    233e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2340:	8d 81       	ldd	r24, Y+5	; 0x05
    2342:	9e 81       	ldd	r25, Y+6	; 0x06
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	9e 83       	std	Y+6, r25	; 0x06
    2348:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234a:	8d 81       	ldd	r24, Y+5	; 0x05
    234c:	9e 81       	ldd	r25, Y+6	; 0x06
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	69 f7       	brne	.-38     	; 0x232c <LCD_SendData+0x16a>
    2352:	14 c0       	rjmp	.+40     	; 0x237c <LCD_SendData+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2354:	6f 81       	ldd	r22, Y+7	; 0x07
    2356:	78 85       	ldd	r23, Y+8	; 0x08
    2358:	89 85       	ldd	r24, Y+9	; 0x09
    235a:	9a 85       	ldd	r25, Y+10	; 0x0a
    235c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	9e 83       	std	Y+6, r25	; 0x06
    2366:	8d 83       	std	Y+5, r24	; 0x05
    2368:	8d 81       	ldd	r24, Y+5	; 0x05
    236a:	9e 81       	ldd	r25, Y+6	; 0x06
    236c:	9a 83       	std	Y+2, r25	; 0x02
    236e:	89 83       	std	Y+1, r24	; 0x01
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	9a 81       	ldd	r25, Y+2	; 0x02
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	f1 f7       	brne	.-4      	; 0x2374 <LCD_SendData+0x1b2>
    2378:	9a 83       	std	Y+2, r25	; 0x02
    237a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_SetPinLevel(LCD_PIN_E, DIO_LOW);
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
}
    2386:	2f 96       	adiw	r28, 0x0f	; 15
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <LCD_InitPinsMode>:


static void LCD_InitPinsMode(void) {
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(LCD_PIN_RS, DIO_OUTPUT);
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	62 e0       	ldi	r22, 0x02	; 2
    23a4:	42 e0       	ldi	r20, 0x02	; 2
    23a6:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_RW, DIO_OUTPUT);
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	61 e0       	ldi	r22, 0x01	; 1
    23ae:	42 e0       	ldi	r20, 0x02	; 2
    23b0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_E , DIO_OUTPUT);
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	42 e0       	ldi	r20, 0x02	; 2
    23ba:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D0, DIO_OUTPUT);
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	67 e0       	ldi	r22, 0x07	; 7
    23c2:	42 e0       	ldi	r20, 0x02	; 2
    23c4:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D1, DIO_OUTPUT);
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	66 e0       	ldi	r22, 0x06	; 6
    23cc:	42 e0       	ldi	r20, 0x02	; 2
    23ce:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D2, DIO_OUTPUT);
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	65 e0       	ldi	r22, 0x05	; 5
    23d6:	42 e0       	ldi	r20, 0x02	; 2
    23d8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D3, DIO_OUTPUT);
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	64 e0       	ldi	r22, 0x04	; 4
    23e0:	42 e0       	ldi	r20, 0x02	; 2
    23e2:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D4, DIO_OUTPUT);
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	63 e0       	ldi	r22, 0x03	; 3
    23ea:	42 e0       	ldi	r20, 0x02	; 2
    23ec:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D5, DIO_OUTPUT);
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	62 e0       	ldi	r22, 0x02	; 2
    23f4:	42 e0       	ldi	r20, 0x02	; 2
    23f6:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D6, DIO_OUTPUT);
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	61 e0       	ldi	r22, 0x01	; 1
    23fe:	42 e0       	ldi	r20, 0x02	; 2
    2400:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(LCD_PIN_D7, DIO_OUTPUT);
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	42 e0       	ldi	r20, 0x02	; 2
    240a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
}
    240e:	cf 91       	pop	r28
    2410:	df 91       	pop	r29
    2412:	08 95       	ret

00002414 <SSD_Init>:
	_delay_ms(500);
	PORTD = 0b01101111; // Print 9
	_delay_ms(500);
	PORTD = 0b00000000; // off*/

void SSD_Init(void) {
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinMode(SSD_PIN_A, DIO_OUTPUT);
    241c:	83 e0       	ldi	r24, 0x03	; 3
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	42 e0       	ldi	r20, 0x02	; 2
    2422:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_B, DIO_OUTPUT);
    2426:	83 e0       	ldi	r24, 0x03	; 3
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	42 e0       	ldi	r20, 0x02	; 2
    242c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_C, DIO_OUTPUT);
    2430:	83 e0       	ldi	r24, 0x03	; 3
    2432:	62 e0       	ldi	r22, 0x02	; 2
    2434:	42 e0       	ldi	r20, 0x02	; 2
    2436:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_D, DIO_OUTPUT);
    243a:	83 e0       	ldi	r24, 0x03	; 3
    243c:	63 e0       	ldi	r22, 0x03	; 3
    243e:	42 e0       	ldi	r20, 0x02	; 2
    2440:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_E, DIO_OUTPUT);
    2444:	83 e0       	ldi	r24, 0x03	; 3
    2446:	64 e0       	ldi	r22, 0x04	; 4
    2448:	42 e0       	ldi	r20, 0x02	; 2
    244a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_F, DIO_OUTPUT);
    244e:	83 e0       	ldi	r24, 0x03	; 3
    2450:	65 e0       	ldi	r22, 0x05	; 5
    2452:	42 e0       	ldi	r20, 0x02	; 2
    2454:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>
    DIO_SetPinMode(SSD_PIN_G, DIO_OUTPUT);
    2458:	83 e0       	ldi	r24, 0x03	; 3
    245a:	66 e0       	ldi	r22, 0x06	; 6
    245c:	42 e0       	ldi	r20, 0x02	; 2
    245e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPinMode>

}
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <SSD_Write>:
void SSD_Write (SSD_NumberType number) {
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	00 d0       	rcall	.+0      	; 0x246e <SSD_Write+0x6>
    246e:	0f 92       	push	r0
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	89 83       	std	Y+1, r24	; 0x01
    switch (number)
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	28 2f       	mov	r18, r24
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	3b 83       	std	Y+3, r19	; 0x03
    247e:	2a 83       	std	Y+2, r18	; 0x02
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	9b 81       	ldd	r25, Y+3	; 0x03
    2484:	84 30       	cpi	r24, 0x04	; 4
    2486:	91 05       	cpc	r25, r1
    2488:	09 f4       	brne	.+2      	; 0x248c <SSD_Write+0x24>
    248a:	d7 c0       	rjmp	.+430    	; 0x263a <SSD_Write+0x1d2>
    248c:	2a 81       	ldd	r18, Y+2	; 0x02
    248e:	3b 81       	ldd	r19, Y+3	; 0x03
    2490:	25 30       	cpi	r18, 0x05	; 5
    2492:	31 05       	cpc	r19, r1
    2494:	ec f4       	brge	.+58     	; 0x24d0 <SSD_Write+0x68>
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	9b 81       	ldd	r25, Y+3	; 0x03
    249a:	81 30       	cpi	r24, 0x01	; 1
    249c:	91 05       	cpc	r25, r1
    249e:	09 f4       	brne	.+2      	; 0x24a2 <SSD_Write+0x3a>
    24a0:	60 c0       	rjmp	.+192    	; 0x2562 <SSD_Write+0xfa>
    24a2:	2a 81       	ldd	r18, Y+2	; 0x02
    24a4:	3b 81       	ldd	r19, Y+3	; 0x03
    24a6:	22 30       	cpi	r18, 0x02	; 2
    24a8:	31 05       	cpc	r19, r1
    24aa:	2c f4       	brge	.+10     	; 0x24b6 <SSD_Write+0x4e>
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	9b 81       	ldd	r25, Y+3	; 0x03
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	99 f1       	breq	.+102    	; 0x251a <SSD_Write+0xb2>
    24b4:	9a c1       	rjmp	.+820    	; 0x27ea <SSD_Write+0x382>
    24b6:	2a 81       	ldd	r18, Y+2	; 0x02
    24b8:	3b 81       	ldd	r19, Y+3	; 0x03
    24ba:	22 30       	cpi	r18, 0x02	; 2
    24bc:	31 05       	cpc	r19, r1
    24be:	09 f4       	brne	.+2      	; 0x24c2 <SSD_Write+0x5a>
    24c0:	74 c0       	rjmp	.+232    	; 0x25aa <SSD_Write+0x142>
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	9b 81       	ldd	r25, Y+3	; 0x03
    24c6:	83 30       	cpi	r24, 0x03	; 3
    24c8:	91 05       	cpc	r25, r1
    24ca:	09 f4       	brne	.+2      	; 0x24ce <SSD_Write+0x66>
    24cc:	92 c0       	rjmp	.+292    	; 0x25f2 <SSD_Write+0x18a>
    24ce:	8d c1       	rjmp	.+794    	; 0x27ea <SSD_Write+0x382>
    24d0:	2a 81       	ldd	r18, Y+2	; 0x02
    24d2:	3b 81       	ldd	r19, Y+3	; 0x03
    24d4:	27 30       	cpi	r18, 0x07	; 7
    24d6:	31 05       	cpc	r19, r1
    24d8:	09 f4       	brne	.+2      	; 0x24dc <SSD_Write+0x74>
    24da:	1b c1       	rjmp	.+566    	; 0x2712 <SSD_Write+0x2aa>
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	9b 81       	ldd	r25, Y+3	; 0x03
    24e0:	88 30       	cpi	r24, 0x08	; 8
    24e2:	91 05       	cpc	r25, r1
    24e4:	6c f4       	brge	.+26     	; 0x2500 <SSD_Write+0x98>
    24e6:	2a 81       	ldd	r18, Y+2	; 0x02
    24e8:	3b 81       	ldd	r19, Y+3	; 0x03
    24ea:	25 30       	cpi	r18, 0x05	; 5
    24ec:	31 05       	cpc	r19, r1
    24ee:	09 f4       	brne	.+2      	; 0x24f2 <SSD_Write+0x8a>
    24f0:	c8 c0       	rjmp	.+400    	; 0x2682 <SSD_Write+0x21a>
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	9b 81       	ldd	r25, Y+3	; 0x03
    24f6:	86 30       	cpi	r24, 0x06	; 6
    24f8:	91 05       	cpc	r25, r1
    24fa:	09 f4       	brne	.+2      	; 0x24fe <SSD_Write+0x96>
    24fc:	e6 c0       	rjmp	.+460    	; 0x26ca <SSD_Write+0x262>
    24fe:	75 c1       	rjmp	.+746    	; 0x27ea <SSD_Write+0x382>
    2500:	2a 81       	ldd	r18, Y+2	; 0x02
    2502:	3b 81       	ldd	r19, Y+3	; 0x03
    2504:	28 30       	cpi	r18, 0x08	; 8
    2506:	31 05       	cpc	r19, r1
    2508:	09 f4       	brne	.+2      	; 0x250c <SSD_Write+0xa4>
    250a:	27 c1       	rjmp	.+590    	; 0x275a <SSD_Write+0x2f2>
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	9b 81       	ldd	r25, Y+3	; 0x03
    2510:	89 30       	cpi	r24, 0x09	; 9
    2512:	91 05       	cpc	r25, r1
    2514:	09 f4       	brne	.+2      	; 0x2518 <SSD_Write+0xb0>
    2516:	45 c1       	rjmp	.+650    	; 0x27a2 <SSD_Write+0x33a>
    2518:	68 c1       	rjmp	.+720    	; 0x27ea <SSD_Write+0x382>
    {

    case SSD_NUMBER_0: // 0b00111111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    251a:	83 e0       	ldi	r24, 0x03	; 3
    251c:	60 e0       	ldi	r22, 0x00	; 0
    251e:	41 e0       	ldi	r20, 0x01	; 1
    2520:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    2524:	83 e0       	ldi	r24, 0x03	; 3
    2526:	61 e0       	ldi	r22, 0x01	; 1
    2528:	41 e0       	ldi	r20, 0x01	; 1
    252a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    252e:	83 e0       	ldi	r24, 0x03	; 3
    2530:	62 e0       	ldi	r22, 0x02	; 2
    2532:	41 e0       	ldi	r20, 0x01	; 1
    2534:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    2538:	83 e0       	ldi	r24, 0x03	; 3
    253a:	63 e0       	ldi	r22, 0x03	; 3
    253c:	41 e0       	ldi	r20, 0x01	; 1
    253e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    2542:	83 e0       	ldi	r24, 0x03	; 3
    2544:	64 e0       	ldi	r22, 0x04	; 4
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    254c:	83 e0       	ldi	r24, 0x03	; 3
    254e:	65 e0       	ldi	r22, 0x05	; 5
    2550:	41 e0       	ldi	r20, 0x01	; 1
    2552:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    2556:	83 e0       	ldi	r24, 0x03	; 3
    2558:	66 e0       	ldi	r22, 0x06	; 6
    255a:	40 e0       	ldi	r20, 0x00	; 0
    255c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    2560:	67 c1       	rjmp	.+718    	; 0x2830 <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_1: // 0b00000110
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    2562:	83 e0       	ldi	r24, 0x03	; 3
    2564:	60 e0       	ldi	r22, 0x00	; 0
    2566:	40 e0       	ldi	r20, 0x00	; 0
    2568:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    256c:	83 e0       	ldi	r24, 0x03	; 3
    256e:	61 e0       	ldi	r22, 0x01	; 1
    2570:	41 e0       	ldi	r20, 0x01	; 1
    2572:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    2576:	83 e0       	ldi	r24, 0x03	; 3
    2578:	62 e0       	ldi	r22, 0x02	; 2
    257a:	41 e0       	ldi	r20, 0x01	; 1
    257c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    2580:	83 e0       	ldi	r24, 0x03	; 3
    2582:	63 e0       	ldi	r22, 0x03	; 3
    2584:	40 e0       	ldi	r20, 0x00	; 0
    2586:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    258a:	83 e0       	ldi	r24, 0x03	; 3
    258c:	64 e0       	ldi	r22, 0x04	; 4
    258e:	40 e0       	ldi	r20, 0x00	; 0
    2590:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    2594:	83 e0       	ldi	r24, 0x03	; 3
    2596:	65 e0       	ldi	r22, 0x05	; 5
    2598:	40 e0       	ldi	r20, 0x00	; 0
    259a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    259e:	83 e0       	ldi	r24, 0x03	; 3
    25a0:	66 e0       	ldi	r22, 0x06	; 6
    25a2:	40 e0       	ldi	r20, 0x00	; 0
    25a4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    25a8:	43 c1       	rjmp	.+646    	; 0x2830 <SSD_Write+0x3c8>
    #endif
        break;

    case SSD_NUMBER_2: // 0b01011011
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    25aa:	83 e0       	ldi	r24, 0x03	; 3
    25ac:	60 e0       	ldi	r22, 0x00	; 0
    25ae:	41 e0       	ldi	r20, 0x01	; 1
    25b0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    25b4:	83 e0       	ldi	r24, 0x03	; 3
    25b6:	61 e0       	ldi	r22, 0x01	; 1
    25b8:	41 e0       	ldi	r20, 0x01	; 1
    25ba:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    25be:	83 e0       	ldi	r24, 0x03	; 3
    25c0:	62 e0       	ldi	r22, 0x02	; 2
    25c2:	40 e0       	ldi	r20, 0x00	; 0
    25c4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    25c8:	83 e0       	ldi	r24, 0x03	; 3
    25ca:	63 e0       	ldi	r22, 0x03	; 3
    25cc:	41 e0       	ldi	r20, 0x01	; 1
    25ce:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    25d2:	83 e0       	ldi	r24, 0x03	; 3
    25d4:	64 e0       	ldi	r22, 0x04	; 4
    25d6:	41 e0       	ldi	r20, 0x01	; 1
    25d8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    25dc:	83 e0       	ldi	r24, 0x03	; 3
    25de:	65 e0       	ldi	r22, 0x05	; 5
    25e0:	40 e0       	ldi	r20, 0x00	; 0
    25e2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    25e6:	83 e0       	ldi	r24, 0x03	; 3
    25e8:	66 e0       	ldi	r22, 0x06	; 6
    25ea:	41 e0       	ldi	r20, 0x01	; 1
    25ec:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    25f0:	1f c1       	rjmp	.+574    	; 0x2830 <SSD_Write+0x3c8>

        break;

    case SSD_NUMBER_3: // 0b01001111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    25f2:	83 e0       	ldi	r24, 0x03	; 3
    25f4:	60 e0       	ldi	r22, 0x00	; 0
    25f6:	41 e0       	ldi	r20, 0x01	; 1
    25f8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    25fc:	83 e0       	ldi	r24, 0x03	; 3
    25fe:	61 e0       	ldi	r22, 0x01	; 1
    2600:	41 e0       	ldi	r20, 0x01	; 1
    2602:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    2606:	83 e0       	ldi	r24, 0x03	; 3
    2608:	62 e0       	ldi	r22, 0x02	; 2
    260a:	41 e0       	ldi	r20, 0x01	; 1
    260c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    2610:	83 e0       	ldi	r24, 0x03	; 3
    2612:	63 e0       	ldi	r22, 0x03	; 3
    2614:	41 e0       	ldi	r20, 0x01	; 1
    2616:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    261a:	83 e0       	ldi	r24, 0x03	; 3
    261c:	64 e0       	ldi	r22, 0x04	; 4
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    2624:	83 e0       	ldi	r24, 0x03	; 3
    2626:	65 e0       	ldi	r22, 0x05	; 5
    2628:	40 e0       	ldi	r20, 0x00	; 0
    262a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    262e:	83 e0       	ldi	r24, 0x03	; 3
    2630:	66 e0       	ldi	r22, 0x06	; 6
    2632:	41 e0       	ldi	r20, 0x01	; 1
    2634:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    2638:	fb c0       	rjmp	.+502    	; 0x2830 <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_4: // 0b01100110
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    263a:	83 e0       	ldi	r24, 0x03	; 3
    263c:	60 e0       	ldi	r22, 0x00	; 0
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    2644:	83 e0       	ldi	r24, 0x03	; 3
    2646:	61 e0       	ldi	r22, 0x01	; 1
    2648:	41 e0       	ldi	r20, 0x01	; 1
    264a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    264e:	83 e0       	ldi	r24, 0x03	; 3
    2650:	62 e0       	ldi	r22, 0x02	; 2
    2652:	41 e0       	ldi	r20, 0x01	; 1
    2654:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    2658:	83 e0       	ldi	r24, 0x03	; 3
    265a:	63 e0       	ldi	r22, 0x03	; 3
    265c:	40 e0       	ldi	r20, 0x00	; 0
    265e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    2662:	83 e0       	ldi	r24, 0x03	; 3
    2664:	64 e0       	ldi	r22, 0x04	; 4
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    266c:	83 e0       	ldi	r24, 0x03	; 3
    266e:	65 e0       	ldi	r22, 0x05	; 5
    2670:	41 e0       	ldi	r20, 0x01	; 1
    2672:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    2676:	83 e0       	ldi	r24, 0x03	; 3
    2678:	66 e0       	ldi	r22, 0x06	; 6
    267a:	41 e0       	ldi	r20, 0x01	; 1
    267c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    2680:	d7 c0       	rjmp	.+430    	; 0x2830 <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_5: // 0b01101101
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    2682:	83 e0       	ldi	r24, 0x03	; 3
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	41 e0       	ldi	r20, 0x01	; 1
    2688:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    268c:	83 e0       	ldi	r24, 0x03	; 3
    268e:	61 e0       	ldi	r22, 0x01	; 1
    2690:	40 e0       	ldi	r20, 0x00	; 0
    2692:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    2696:	83 e0       	ldi	r24, 0x03	; 3
    2698:	62 e0       	ldi	r22, 0x02	; 2
    269a:	41 e0       	ldi	r20, 0x01	; 1
    269c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    26a0:	83 e0       	ldi	r24, 0x03	; 3
    26a2:	63 e0       	ldi	r22, 0x03	; 3
    26a4:	41 e0       	ldi	r20, 0x01	; 1
    26a6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    26aa:	83 e0       	ldi	r24, 0x03	; 3
    26ac:	64 e0       	ldi	r22, 0x04	; 4
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    26b4:	83 e0       	ldi	r24, 0x03	; 3
    26b6:	65 e0       	ldi	r22, 0x05	; 5
    26b8:	41 e0       	ldi	r20, 0x01	; 1
    26ba:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    26be:	83 e0       	ldi	r24, 0x03	; 3
    26c0:	66 e0       	ldi	r22, 0x06	; 6
    26c2:	41 e0       	ldi	r20, 0x01	; 1
    26c4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    26c8:	b3 c0       	rjmp	.+358    	; 0x2830 <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_6: // 0b01111101
            #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    26ca:	83 e0       	ldi	r24, 0x03	; 3
    26cc:	60 e0       	ldi	r22, 0x00	; 0
    26ce:	41 e0       	ldi	r20, 0x01	; 1
    26d0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    26d4:	83 e0       	ldi	r24, 0x03	; 3
    26d6:	61 e0       	ldi	r22, 0x01	; 1
    26d8:	40 e0       	ldi	r20, 0x00	; 0
    26da:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    26de:	83 e0       	ldi	r24, 0x03	; 3
    26e0:	62 e0       	ldi	r22, 0x02	; 2
    26e2:	41 e0       	ldi	r20, 0x01	; 1
    26e4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    26e8:	83 e0       	ldi	r24, 0x03	; 3
    26ea:	63 e0       	ldi	r22, 0x03	; 3
    26ec:	41 e0       	ldi	r20, 0x01	; 1
    26ee:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    26f2:	83 e0       	ldi	r24, 0x03	; 3
    26f4:	64 e0       	ldi	r22, 0x04	; 4
    26f6:	41 e0       	ldi	r20, 0x01	; 1
    26f8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    26fc:	83 e0       	ldi	r24, 0x03	; 3
    26fe:	65 e0       	ldi	r22, 0x05	; 5
    2700:	41 e0       	ldi	r20, 0x01	; 1
    2702:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    2706:	83 e0       	ldi	r24, 0x03	; 3
    2708:	66 e0       	ldi	r22, 0x06	; 6
    270a:	41 e0       	ldi	r20, 0x01	; 1
    270c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    2710:	8f c0       	rjmp	.+286    	; 0x2830 <SSD_Write+0x3c8>
        #error "Invalid SSD Type"
    #endif
        break;
    case SSD_NUMBER_7: // 0b00000111
        #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    2712:	83 e0       	ldi	r24, 0x03	; 3
    2714:	60 e0       	ldi	r22, 0x00	; 0
    2716:	41 e0       	ldi	r20, 0x01	; 1
    2718:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    271c:	83 e0       	ldi	r24, 0x03	; 3
    271e:	61 e0       	ldi	r22, 0x01	; 1
    2720:	41 e0       	ldi	r20, 0x01	; 1
    2722:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    2726:	83 e0       	ldi	r24, 0x03	; 3
    2728:	62 e0       	ldi	r22, 0x02	; 2
    272a:	41 e0       	ldi	r20, 0x01	; 1
    272c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    2730:	83 e0       	ldi	r24, 0x03	; 3
    2732:	63 e0       	ldi	r22, 0x03	; 3
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    273a:	83 e0       	ldi	r24, 0x03	; 3
    273c:	64 e0       	ldi	r22, 0x04	; 4
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    2744:	83 e0       	ldi	r24, 0x03	; 3
    2746:	65 e0       	ldi	r22, 0x05	; 5
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    274e:	83 e0       	ldi	r24, 0x03	; 3
    2750:	66 e0       	ldi	r22, 0x06	; 6
    2752:	40 e0       	ldi	r20, 0x00	; 0
    2754:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    2758:	6b c0       	rjmp	.+214    	; 0x2830 <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_8: // 0b01111111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    275a:	83 e0       	ldi	r24, 0x03	; 3
    275c:	60 e0       	ldi	r22, 0x00	; 0
    275e:	41 e0       	ldi	r20, 0x01	; 1
    2760:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    2764:	83 e0       	ldi	r24, 0x03	; 3
    2766:	61 e0       	ldi	r22, 0x01	; 1
    2768:	41 e0       	ldi	r20, 0x01	; 1
    276a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    276e:	83 e0       	ldi	r24, 0x03	; 3
    2770:	62 e0       	ldi	r22, 0x02	; 2
    2772:	41 e0       	ldi	r20, 0x01	; 1
    2774:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    2778:	83 e0       	ldi	r24, 0x03	; 3
    277a:	63 e0       	ldi	r22, 0x03	; 3
    277c:	41 e0       	ldi	r20, 0x01	; 1
    277e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_HIGH);
    2782:	83 e0       	ldi	r24, 0x03	; 3
    2784:	64 e0       	ldi	r22, 0x04	; 4
    2786:	41 e0       	ldi	r20, 0x01	; 1
    2788:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    278c:	83 e0       	ldi	r24, 0x03	; 3
    278e:	65 e0       	ldi	r22, 0x05	; 5
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    2796:	83 e0       	ldi	r24, 0x03	; 3
    2798:	66 e0       	ldi	r22, 0x06	; 6
    279a:	41 e0       	ldi	r20, 0x01	; 1
    279c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    27a0:	47 c0       	rjmp	.+142    	; 0x2830 <SSD_Write+0x3c8>
    #endif

        break;
    case SSD_NUMBER_9: // 0b01101111
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_HIGH);
    27a2:	83 e0       	ldi	r24, 0x03	; 3
    27a4:	60 e0       	ldi	r22, 0x00	; 0
    27a6:	41 e0       	ldi	r20, 0x01	; 1
    27a8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_HIGH);
    27ac:	83 e0       	ldi	r24, 0x03	; 3
    27ae:	61 e0       	ldi	r22, 0x01	; 1
    27b0:	41 e0       	ldi	r20, 0x01	; 1
    27b2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_HIGH);
    27b6:	83 e0       	ldi	r24, 0x03	; 3
    27b8:	62 e0       	ldi	r22, 0x02	; 2
    27ba:	41 e0       	ldi	r20, 0x01	; 1
    27bc:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_HIGH);
    27c0:	83 e0       	ldi	r24, 0x03	; 3
    27c2:	63 e0       	ldi	r22, 0x03	; 3
    27c4:	41 e0       	ldi	r20, 0x01	; 1
    27c6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    27ca:	83 e0       	ldi	r24, 0x03	; 3
    27cc:	64 e0       	ldi	r22, 0x04	; 4
    27ce:	40 e0       	ldi	r20, 0x00	; 0
    27d0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_HIGH);
    27d4:	83 e0       	ldi	r24, 0x03	; 3
    27d6:	65 e0       	ldi	r22, 0x05	; 5
    27d8:	41 e0       	ldi	r20, 0x01	; 1
    27da:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_HIGH);
    27de:	83 e0       	ldi	r24, 0x03	; 3
    27e0:	66 e0       	ldi	r22, 0x06	; 6
    27e2:	41 e0       	ldi	r20, 0x01	; 1
    27e4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    27e8:	23 c0       	rjmp	.+70     	; 0x2830 <SSD_Write+0x3c8>
        break;

    case SSD_OFF:
    default:
    #if SSD_TYPE == COMM_CATHODE
        DIO_SetPinLevel(SSD_PIN_A, DIO_LOW);
    27ea:	83 e0       	ldi	r24, 0x03	; 3
    27ec:	60 e0       	ldi	r22, 0x00	; 0
    27ee:	40 e0       	ldi	r20, 0x00	; 0
    27f0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_B, DIO_LOW);
    27f4:	83 e0       	ldi	r24, 0x03	; 3
    27f6:	61 e0       	ldi	r22, 0x01	; 1
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_C, DIO_LOW);
    27fe:	83 e0       	ldi	r24, 0x03	; 3
    2800:	62 e0       	ldi	r22, 0x02	; 2
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_D, DIO_LOW);
    2808:	83 e0       	ldi	r24, 0x03	; 3
    280a:	63 e0       	ldi	r22, 0x03	; 3
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_E, DIO_LOW);
    2812:	83 e0       	ldi	r24, 0x03	; 3
    2814:	64 e0       	ldi	r22, 0x04	; 4
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_F, DIO_LOW);
    281c:	83 e0       	ldi	r24, 0x03	; 3
    281e:	65 e0       	ldi	r22, 0x05	; 5
    2820:	40 e0       	ldi	r20, 0x00	; 0
    2822:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
        DIO_SetPinLevel(SSD_PIN_G, DIO_LOW);
    2826:	83 e0       	ldi	r24, 0x03	; 3
    2828:	66 e0       	ldi	r22, 0x06	; 6
    282a:	40 e0       	ldi	r20, 0x00	; 0
    282c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <DIO_SetPinLevel>
    #else
        #error "Invalid SSD Type"
    #endif
        break;
    }
}
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	08 95       	ret

0000283c <main>:
void lcd();
void lcd2();
void keybad();
u8 Check_IS_NOtANumber (Keypad_ButtonType pressed_button );
int main(void)
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    keybad();
    2844:	0e 94 e5 17 	call	0x2fca	; 0x2fca <keybad>
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	90 e0       	ldi	r25, 0x00	; 0
    //     else if(DIO_ReadPinLevel(DIO_PORTA,DIO_PIN1)==DIO_LOW){
    //         //DIO_SetPinLevel(DIO_PORTA,DIO_PIN2,DIO_LOW);
    //         countdown();
    //     }
    // }
}
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <calmuldiv>:
void calmuldiv(s32 arr [],u8 x)
{////////// 1111 + 2 + 3 + 5 ///////6  // 1+2+6*2*2+5*2
    2852:	0f 93       	push	r16
    2854:	1f 93       	push	r17
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	e7 97       	sbiw	r28, 0x37	; 55
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	9a ab       	std	Y+50, r25	; 0x32
    286c:	89 ab       	std	Y+49, r24	; 0x31
    286e:	6b ab       	std	Y+51, r22	; 0x33
  // s32 arr[20]={1,'+',2,'+',3};
  //LCD_Clear();
   //x=5;
   s32 arr2[20];

    int c=0;
    2870:	18 86       	std	Y+8, r1	; 0x08
    2872:	1f 82       	std	Y+7, r1	; 0x07
    int divzerr=0;
    2874:	1e 82       	std	Y+6, r1	; 0x06
    2876:	1d 82       	std	Y+5, r1	; 0x05
    s32 m=0;
    2878:	1c 82       	std	Y+4, r1	; 0x04
    287a:	1b 82       	std	Y+3, r1	; 0x03
    for (u8 i = 1; i < x+1; i+=2)
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	8a 83       	std	Y+2, r24	; 0x02
    2880:	fb c0       	rjmp	.+502    	; 0x2a78 <calmuldiv+0x226>
    {
        //LCD_DisplayNumber(arr[i]);
        switch (arr[i])
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	88 2f       	mov	r24, r24
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	9c 01       	movw	r18, r24
    288a:	22 0f       	add	r18, r18
    288c:	33 1f       	adc	r19, r19
    288e:	89 a9       	ldd	r24, Y+49	; 0x31
    2890:	9a a9       	ldd	r25, Y+50	; 0x32
    2892:	fc 01       	movw	r30, r24
    2894:	e2 0f       	add	r30, r18
    2896:	f3 1f       	adc	r31, r19
    2898:	20 81       	ld	r18, Z
    289a:	31 81       	ldd	r19, Z+1	; 0x01
    289c:	3f ab       	std	Y+55, r19	; 0x37
    289e:	2e ab       	std	Y+54, r18	; 0x36
    28a0:	8e a9       	ldd	r24, Y+54	; 0x36
    28a2:	9f a9       	ldd	r25, Y+55	; 0x37
    28a4:	8a 32       	cpi	r24, 0x2A	; 42
    28a6:	91 05       	cpc	r25, r1
    28a8:	39 f0       	breq	.+14     	; 0x28b8 <calmuldiv+0x66>
    28aa:	ee a9       	ldd	r30, Y+54	; 0x36
    28ac:	ff a9       	ldd	r31, Y+55	; 0x37
    28ae:	ef 32       	cpi	r30, 0x2F	; 47
    28b0:	f1 05       	cpc	r31, r1
    28b2:	09 f4       	brne	.+2      	; 0x28b6 <calmuldiv+0x64>
    28b4:	4b c0       	rjmp	.+150    	; 0x294c <calmuldiv+0xfa>
    28b6:	96 c0       	rjmp	.+300    	; 0x29e4 <calmuldiv+0x192>
        {
            case '*':
            arr[i+1]=arr[i-1]*arr[i+1];
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	88 2f       	mov	r24, r24
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	01 96       	adiw	r24, 0x01	; 1
    28c0:	9c 01       	movw	r18, r24
    28c2:	22 0f       	add	r18, r18
    28c4:	33 1f       	adc	r19, r19
    28c6:	89 a9       	ldd	r24, Y+49	; 0x31
    28c8:	9a a9       	ldd	r25, Y+50	; 0x32
    28ca:	dc 01       	movw	r26, r24
    28cc:	a2 0f       	add	r26, r18
    28ce:	b3 1f       	adc	r27, r19
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	82 1b       	sub	r24, r18
    28dc:	93 0b       	sbc	r25, r19
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	22 27       	eor	r18, r18
    28e4:	33 27       	eor	r19, r19
    28e6:	28 1b       	sub	r18, r24
    28e8:	39 0b       	sbc	r19, r25
    28ea:	89 a9       	ldd	r24, Y+49	; 0x31
    28ec:	9a a9       	ldd	r25, Y+50	; 0x32
    28ee:	fc 01       	movw	r30, r24
    28f0:	e2 0f       	add	r30, r18
    28f2:	f3 1f       	adc	r31, r19
    28f4:	40 81       	ld	r20, Z
    28f6:	51 81       	ldd	r21, Z+1	; 0x01
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	88 2f       	mov	r24, r24
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	01 96       	adiw	r24, 0x01	; 1
    2900:	9c 01       	movw	r18, r24
    2902:	22 0f       	add	r18, r18
    2904:	33 1f       	adc	r19, r19
    2906:	89 a9       	ldd	r24, Y+49	; 0x31
    2908:	9a a9       	ldd	r25, Y+50	; 0x32
    290a:	fc 01       	movw	r30, r24
    290c:	e2 0f       	add	r30, r18
    290e:	f3 1f       	adc	r31, r19
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	9c 01       	movw	r18, r24
    2916:	42 9f       	mul	r20, r18
    2918:	c0 01       	movw	r24, r0
    291a:	43 9f       	mul	r20, r19
    291c:	90 0d       	add	r25, r0
    291e:	52 9f       	mul	r21, r18
    2920:	90 0d       	add	r25, r0
    2922:	11 24       	eor	r1, r1
    2924:	11 96       	adiw	r26, 0x01	; 1
    2926:	9c 93       	st	X, r25
    2928:	8e 93       	st	-X, r24
            m=arr[i+1];
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	88 2f       	mov	r24, r24
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	01 96       	adiw	r24, 0x01	; 1
    2932:	9c 01       	movw	r18, r24
    2934:	22 0f       	add	r18, r18
    2936:	33 1f       	adc	r19, r19
    2938:	89 a9       	ldd	r24, Y+49	; 0x31
    293a:	9a a9       	ldd	r25, Y+50	; 0x32
    293c:	fc 01       	movw	r30, r24
    293e:	e2 0f       	add	r30, r18
    2940:	f3 1f       	adc	r31, r19
    2942:	80 81       	ld	r24, Z
    2944:	91 81       	ldd	r25, Z+1	; 0x01
    2946:	9c 83       	std	Y+4, r25	; 0x04
    2948:	8b 83       	std	Y+3, r24	; 0x03
    294a:	8f c0       	rjmp	.+286    	; 0x2a6a <calmuldiv+0x218>
            break;
            case '/':
            if(arr[i+1]==0)
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	88 2f       	mov	r24, r24
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	01 96       	adiw	r24, 0x01	; 1
    2954:	9c 01       	movw	r18, r24
    2956:	22 0f       	add	r18, r18
    2958:	33 1f       	adc	r19, r19
    295a:	89 a9       	ldd	r24, Y+49	; 0x31
    295c:	9a a9       	ldd	r25, Y+50	; 0x32
    295e:	fc 01       	movw	r30, r24
    2960:	e2 0f       	add	r30, r18
    2962:	f3 1f       	adc	r31, r19
    2964:	80 81       	ld	r24, Z
    2966:	91 81       	ldd	r25, Z+1	; 0x01
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	29 f4       	brne	.+10     	; 0x2976 <calmuldiv+0x124>
                {divzerr=1;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9e 83       	std	Y+6, r25	; 0x06
    2972:	8d 83       	std	Y+5, r24	; 0x05
    2974:	7a c0       	rjmp	.+244    	; 0x2a6a <calmuldiv+0x218>
                break;
                }
            arr[i+1]=arr[i-1]/arr[i+1];
    2976:	8a 81       	ldd	r24, Y+2	; 0x02
    2978:	88 2f       	mov	r24, r24
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	01 96       	adiw	r24, 0x01	; 1
    297e:	9c 01       	movw	r18, r24
    2980:	22 0f       	add	r18, r18
    2982:	33 1f       	adc	r19, r19
    2984:	89 a9       	ldd	r24, Y+49	; 0x31
    2986:	9a a9       	ldd	r25, Y+50	; 0x32
    2988:	8c 01       	movw	r16, r24
    298a:	02 0f       	add	r16, r18
    298c:	13 1f       	adc	r17, r19
    298e:	8a 81       	ldd	r24, Y+2	; 0x02
    2990:	28 2f       	mov	r18, r24
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	82 1b       	sub	r24, r18
    299a:	93 0b       	sbc	r25, r19
    299c:	88 0f       	add	r24, r24
    299e:	99 1f       	adc	r25, r25
    29a0:	22 27       	eor	r18, r18
    29a2:	33 27       	eor	r19, r19
    29a4:	28 1b       	sub	r18, r24
    29a6:	39 0b       	sbc	r19, r25
    29a8:	89 a9       	ldd	r24, Y+49	; 0x31
    29aa:	9a a9       	ldd	r25, Y+50	; 0x32
    29ac:	fc 01       	movw	r30, r24
    29ae:	e2 0f       	add	r30, r18
    29b0:	f3 1f       	adc	r31, r19
    29b2:	40 81       	ld	r20, Z
    29b4:	51 81       	ldd	r21, Z+1	; 0x01
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	88 2f       	mov	r24, r24
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	01 96       	adiw	r24, 0x01	; 1
    29be:	9c 01       	movw	r18, r24
    29c0:	22 0f       	add	r18, r18
    29c2:	33 1f       	adc	r19, r19
    29c4:	89 a9       	ldd	r24, Y+49	; 0x31
    29c6:	9a a9       	ldd	r25, Y+50	; 0x32
    29c8:	fc 01       	movw	r30, r24
    29ca:	e2 0f       	add	r30, r18
    29cc:	f3 1f       	adc	r31, r19
    29ce:	20 81       	ld	r18, Z
    29d0:	31 81       	ldd	r19, Z+1	; 0x01
    29d2:	ca 01       	movw	r24, r20
    29d4:	b9 01       	movw	r22, r18
    29d6:	0e 94 06 19 	call	0x320c	; 0x320c <__divmodhi4>
    29da:	cb 01       	movw	r24, r22
    29dc:	f8 01       	movw	r30, r16
    29de:	91 83       	std	Z+1, r25	; 0x01
    29e0:	80 83       	st	Z, r24
    29e2:	43 c0       	rjmp	.+134    	; 0x2a6a <calmuldiv+0x218>
            
            break;
            default:
            arr2[c]=arr[i-1];
    29e4:	6f 81       	ldd	r22, Y+7	; 0x07
    29e6:	78 85       	ldd	r23, Y+8	; 0x08
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	82 1b       	sub	r24, r18
    29f4:	93 0b       	sbc	r25, r19
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	22 27       	eor	r18, r18
    29fc:	33 27       	eor	r19, r19
    29fe:	28 1b       	sub	r18, r24
    2a00:	39 0b       	sbc	r19, r25
    2a02:	89 a9       	ldd	r24, Y+49	; 0x31
    2a04:	9a a9       	ldd	r25, Y+50	; 0x32
    2a06:	fc 01       	movw	r30, r24
    2a08:	e2 0f       	add	r30, r18
    2a0a:	f3 1f       	adc	r31, r19
    2a0c:	40 81       	ld	r20, Z
    2a0e:	51 81       	ldd	r21, Z+1	; 0x01
    2a10:	9b 01       	movw	r18, r22
    2a12:	22 0f       	add	r18, r18
    2a14:	33 1f       	adc	r19, r19
    2a16:	ce 01       	movw	r24, r28
    2a18:	01 96       	adiw	r24, 0x01	; 1
    2a1a:	82 0f       	add	r24, r18
    2a1c:	93 1f       	adc	r25, r19
    2a1e:	fc 01       	movw	r30, r24
    2a20:	38 96       	adiw	r30, 0x08	; 8
    2a22:	51 83       	std	Z+1, r21	; 0x01
    2a24:	40 83       	st	Z, r20
            arr2[c+1]=arr[i];
    2a26:	8f 81       	ldd	r24, Y+7	; 0x07
    2a28:	98 85       	ldd	r25, Y+8	; 0x08
    2a2a:	bc 01       	movw	r22, r24
    2a2c:	6f 5f       	subi	r22, 0xFF	; 255
    2a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a30:	8a 81       	ldd	r24, Y+2	; 0x02
    2a32:	88 2f       	mov	r24, r24
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	9c 01       	movw	r18, r24
    2a38:	22 0f       	add	r18, r18
    2a3a:	33 1f       	adc	r19, r19
    2a3c:	89 a9       	ldd	r24, Y+49	; 0x31
    2a3e:	9a a9       	ldd	r25, Y+50	; 0x32
    2a40:	fc 01       	movw	r30, r24
    2a42:	e2 0f       	add	r30, r18
    2a44:	f3 1f       	adc	r31, r19
    2a46:	40 81       	ld	r20, Z
    2a48:	51 81       	ldd	r21, Z+1	; 0x01
    2a4a:	9b 01       	movw	r18, r22
    2a4c:	22 0f       	add	r18, r18
    2a4e:	33 1f       	adc	r19, r19
    2a50:	ce 01       	movw	r24, r28
    2a52:	01 96       	adiw	r24, 0x01	; 1
    2a54:	82 0f       	add	r24, r18
    2a56:	93 1f       	adc	r25, r19
    2a58:	fc 01       	movw	r30, r24
    2a5a:	38 96       	adiw	r30, 0x08	; 8
    2a5c:	51 83       	std	Z+1, r21	; 0x01
    2a5e:	40 83       	st	Z, r20
            c+=2;
    2a60:	8f 81       	ldd	r24, Y+7	; 0x07
    2a62:	98 85       	ldd	r25, Y+8	; 0x08
    2a64:	02 96       	adiw	r24, 0x02	; 2
    2a66:	98 87       	std	Y+8, r25	; 0x08
    2a68:	8f 83       	std	Y+7, r24	; 0x07
            break;
        }
        if(divzerr)
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	71 f4       	brne	.+28     	; 0x2a8e <calmuldiv+0x23c>
   s32 arr2[20];

    int c=0;
    int divzerr=0;
    s32 m=0;
    for (u8 i = 1; i < x+1; i+=2)
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	8e 5f       	subi	r24, 0xFE	; 254
    2a76:	8a 83       	std	Y+2, r24	; 0x02
    2a78:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a80:	88 2f       	mov	r24, r24
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	01 96       	adiw	r24, 0x01	; 1
    2a86:	28 17       	cp	r18, r24
    2a88:	39 07       	cpc	r19, r25
    2a8a:	0c f4       	brge	.+2      	; 0x2a8e <calmuldiv+0x23c>
    2a8c:	fa ce       	rjmp	.-524    	; 0x2882 <calmuldiv+0x30>
        if(divzerr)
            break;
        /* code */
    }

    if(!divzerr){
    2a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a90:	9e 81       	ldd	r25, Y+6	; 0x06
    2a92:	00 97       	sbiw	r24, 0x00	; 0
    2a94:	09 f0       	breq	.+2      	; 0x2a98 <calmuldiv+0x246>
    2a96:	40 c1       	rjmp	.+640    	; 0x2d18 <calmuldiv+0x4c6>
   // if(arr[x-1]=='x' || arr[x-1]=='/')
        {
            arr2[c]=arr[x];
    2a98:	6f 81       	ldd	r22, Y+7	; 0x07
    2a9a:	78 85       	ldd	r23, Y+8	; 0x08
    2a9c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a9e:	88 2f       	mov	r24, r24
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	9c 01       	movw	r18, r24
    2aa4:	22 0f       	add	r18, r18
    2aa6:	33 1f       	adc	r19, r19
    2aa8:	89 a9       	ldd	r24, Y+49	; 0x31
    2aaa:	9a a9       	ldd	r25, Y+50	; 0x32
    2aac:	fc 01       	movw	r30, r24
    2aae:	e2 0f       	add	r30, r18
    2ab0:	f3 1f       	adc	r31, r19
    2ab2:	40 81       	ld	r20, Z
    2ab4:	51 81       	ldd	r21, Z+1	; 0x01
    2ab6:	9b 01       	movw	r18, r22
    2ab8:	22 0f       	add	r18, r18
    2aba:	33 1f       	adc	r19, r19
    2abc:	ce 01       	movw	r24, r28
    2abe:	01 96       	adiw	r24, 0x01	; 1
    2ac0:	82 0f       	add	r24, r18
    2ac2:	93 1f       	adc	r25, r19
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	38 96       	adiw	r30, 0x08	; 8
    2ac8:	51 83       	std	Z+1, r21	; 0x01
    2aca:	40 83       	st	Z, r20


        ///////////////////////////////////////
       // _delay_ms(2000);
        //LCD_Clear();
        for (u8 i = 1; i < c+1; i+=2)
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	89 83       	std	Y+1, r24	; 0x01
    2ad0:	01 c1       	rjmp	.+514    	; 0x2cd4 <calmuldiv+0x482>
        {
            //LCD_DisplayNumber(arr[i]);
            switch (arr2[i])
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	88 2f       	mov	r24, r24
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9c 01       	movw	r18, r24
    2ada:	22 0f       	add	r18, r18
    2adc:	33 1f       	adc	r19, r19
    2ade:	ce 01       	movw	r24, r28
    2ae0:	01 96       	adiw	r24, 0x01	; 1
    2ae2:	82 0f       	add	r24, r18
    2ae4:	93 1f       	adc	r25, r19
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	38 96       	adiw	r30, 0x08	; 8
    2aea:	20 81       	ld	r18, Z
    2aec:	31 81       	ldd	r19, Z+1	; 0x01
    2aee:	3d ab       	std	Y+53, r19	; 0x35
    2af0:	2c ab       	std	Y+52, r18	; 0x34
    2af2:	8c a9       	ldd	r24, Y+52	; 0x34
    2af4:	9d a9       	ldd	r25, Y+53	; 0x35
    2af6:	8b 32       	cpi	r24, 0x2B	; 43
    2af8:	91 05       	cpc	r25, r1
    2afa:	c1 f0       	breq	.+48     	; 0x2b2c <calmuldiv+0x2da>
    2afc:	ec a9       	ldd	r30, Y+52	; 0x34
    2afe:	fd a9       	ldd	r31, Y+53	; 0x35
    2b00:	ec 32       	cpi	r30, 0x2C	; 44
    2b02:	f1 05       	cpc	r31, r1
    2b04:	3c f4       	brge	.+14     	; 0x2b14 <calmuldiv+0x2c2>
    2b06:	2c a9       	ldd	r18, Y+52	; 0x34
    2b08:	3d a9       	ldd	r19, Y+53	; 0x35
    2b0a:	2a 32       	cpi	r18, 0x2A	; 42
    2b0c:	31 05       	cpc	r19, r1
    2b0e:	09 f4       	brne	.+2      	; 0x2b12 <calmuldiv+0x2c0>
    2b10:	71 c0       	rjmp	.+226    	; 0x2bf4 <calmuldiv+0x3a2>
    2b12:	dd c0       	rjmp	.+442    	; 0x2cce <calmuldiv+0x47c>
    2b14:	8c a9       	ldd	r24, Y+52	; 0x34
    2b16:	9d a9       	ldd	r25, Y+53	; 0x35
    2b18:	8d 32       	cpi	r24, 0x2D	; 45
    2b1a:	91 05       	cpc	r25, r1
    2b1c:	c9 f1       	breq	.+114    	; 0x2b90 <calmuldiv+0x33e>
    2b1e:	ec a9       	ldd	r30, Y+52	; 0x34
    2b20:	fd a9       	ldd	r31, Y+53	; 0x35
    2b22:	ef 32       	cpi	r30, 0x2F	; 47
    2b24:	f1 05       	cpc	r31, r1
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <calmuldiv+0x2d8>
    2b28:	9c c0       	rjmp	.+312    	; 0x2c62 <calmuldiv+0x410>
    2b2a:	d1 c0       	rjmp	.+418    	; 0x2cce <calmuldiv+0x47c>
            {
                case '+':
                arr2[i+1]=arr2[i-1]+arr2[i+1];
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	88 2f       	mov	r24, r24
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	bc 01       	movw	r22, r24
    2b34:	6f 5f       	subi	r22, 0xFF	; 255
    2b36:	7f 4f       	sbci	r23, 0xFF	; 255
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	88 2f       	mov	r24, r24
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	9c 01       	movw	r18, r24
    2b42:	22 0f       	add	r18, r18
    2b44:	33 1f       	adc	r19, r19
    2b46:	ce 01       	movw	r24, r28
    2b48:	01 96       	adiw	r24, 0x01	; 1
    2b4a:	82 0f       	add	r24, r18
    2b4c:	93 1f       	adc	r25, r19
    2b4e:	fc 01       	movw	r30, r24
    2b50:	38 96       	adiw	r30, 0x08	; 8
    2b52:	40 81       	ld	r20, Z
    2b54:	51 81       	ldd	r21, Z+1	; 0x01
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	88 2f       	mov	r24, r24
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	01 96       	adiw	r24, 0x01	; 1
    2b5e:	9c 01       	movw	r18, r24
    2b60:	22 0f       	add	r18, r18
    2b62:	33 1f       	adc	r19, r19
    2b64:	ce 01       	movw	r24, r28
    2b66:	01 96       	adiw	r24, 0x01	; 1
    2b68:	82 0f       	add	r24, r18
    2b6a:	93 1f       	adc	r25, r19
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	38 96       	adiw	r30, 0x08	; 8
    2b70:	80 81       	ld	r24, Z
    2b72:	91 81       	ldd	r25, Z+1	; 0x01
    2b74:	48 0f       	add	r20, r24
    2b76:	59 1f       	adc	r21, r25
    2b78:	9b 01       	movw	r18, r22
    2b7a:	22 0f       	add	r18, r18
    2b7c:	33 1f       	adc	r19, r19
    2b7e:	ce 01       	movw	r24, r28
    2b80:	01 96       	adiw	r24, 0x01	; 1
    2b82:	82 0f       	add	r24, r18
    2b84:	93 1f       	adc	r25, r19
    2b86:	fc 01       	movw	r30, r24
    2b88:	38 96       	adiw	r30, 0x08	; 8
    2b8a:	51 83       	std	Z+1, r21	; 0x01
    2b8c:	40 83       	st	Z, r20
    2b8e:	9f c0       	rjmp	.+318    	; 0x2cce <calmuldiv+0x47c>
                break;
                case '-':
                arr2[i+1]=arr2[i-1]-arr2[i+1];
    2b90:	89 81       	ldd	r24, Y+1	; 0x01
    2b92:	88 2f       	mov	r24, r24
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	bc 01       	movw	r22, r24
    2b98:	6f 5f       	subi	r22, 0xFF	; 255
    2b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	88 2f       	mov	r24, r24
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	9c 01       	movw	r18, r24
    2ba6:	22 0f       	add	r18, r18
    2ba8:	33 1f       	adc	r19, r19
    2baa:	ce 01       	movw	r24, r28
    2bac:	01 96       	adiw	r24, 0x01	; 1
    2bae:	82 0f       	add	r24, r18
    2bb0:	93 1f       	adc	r25, r19
    2bb2:	fc 01       	movw	r30, r24
    2bb4:	38 96       	adiw	r30, 0x08	; 8
    2bb6:	40 81       	ld	r20, Z
    2bb8:	51 81       	ldd	r21, Z+1	; 0x01
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	01 96       	adiw	r24, 0x01	; 1
    2bc2:	9c 01       	movw	r18, r24
    2bc4:	22 0f       	add	r18, r18
    2bc6:	33 1f       	adc	r19, r19
    2bc8:	ce 01       	movw	r24, r28
    2bca:	01 96       	adiw	r24, 0x01	; 1
    2bcc:	82 0f       	add	r24, r18
    2bce:	93 1f       	adc	r25, r19
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	38 96       	adiw	r30, 0x08	; 8
    2bd4:	80 81       	ld	r24, Z
    2bd6:	91 81       	ldd	r25, Z+1	; 0x01
    2bd8:	48 1b       	sub	r20, r24
    2bda:	59 0b       	sbc	r21, r25
    2bdc:	9b 01       	movw	r18, r22
    2bde:	22 0f       	add	r18, r18
    2be0:	33 1f       	adc	r19, r19
    2be2:	ce 01       	movw	r24, r28
    2be4:	01 96       	adiw	r24, 0x01	; 1
    2be6:	82 0f       	add	r24, r18
    2be8:	93 1f       	adc	r25, r19
    2bea:	fc 01       	movw	r30, r24
    2bec:	38 96       	adiw	r30, 0x08	; 8
    2bee:	51 83       	std	Z+1, r21	; 0x01
    2bf0:	40 83       	st	Z, r20
    2bf2:	6d c0       	rjmp	.+218    	; 0x2cce <calmuldiv+0x47c>
                break;
                case '*':
                arr2[i+1]=arr2[i-1]*arr[i+1];
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	88 2f       	mov	r24, r24
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	bc 01       	movw	r22, r24
    2bfc:	6f 5f       	subi	r22, 0xFF	; 255
    2bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	88 2f       	mov	r24, r24
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	9c 01       	movw	r18, r24
    2c0a:	22 0f       	add	r18, r18
    2c0c:	33 1f       	adc	r19, r19
    2c0e:	ce 01       	movw	r24, r28
    2c10:	01 96       	adiw	r24, 0x01	; 1
    2c12:	82 0f       	add	r24, r18
    2c14:	93 1f       	adc	r25, r19
    2c16:	fc 01       	movw	r30, r24
    2c18:	38 96       	adiw	r30, 0x08	; 8
    2c1a:	40 81       	ld	r20, Z
    2c1c:	51 81       	ldd	r21, Z+1	; 0x01
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	88 2f       	mov	r24, r24
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	01 96       	adiw	r24, 0x01	; 1
    2c26:	9c 01       	movw	r18, r24
    2c28:	22 0f       	add	r18, r18
    2c2a:	33 1f       	adc	r19, r19
    2c2c:	89 a9       	ldd	r24, Y+49	; 0x31
    2c2e:	9a a9       	ldd	r25, Y+50	; 0x32
    2c30:	fc 01       	movw	r30, r24
    2c32:	e2 0f       	add	r30, r18
    2c34:	f3 1f       	adc	r31, r19
    2c36:	80 81       	ld	r24, Z
    2c38:	91 81       	ldd	r25, Z+1	; 0x01
    2c3a:	9a 01       	movw	r18, r20
    2c3c:	28 9f       	mul	r18, r24
    2c3e:	a0 01       	movw	r20, r0
    2c40:	29 9f       	mul	r18, r25
    2c42:	50 0d       	add	r21, r0
    2c44:	38 9f       	mul	r19, r24
    2c46:	50 0d       	add	r21, r0
    2c48:	11 24       	eor	r1, r1
    2c4a:	9b 01       	movw	r18, r22
    2c4c:	22 0f       	add	r18, r18
    2c4e:	33 1f       	adc	r19, r19
    2c50:	ce 01       	movw	r24, r28
    2c52:	01 96       	adiw	r24, 0x01	; 1
    2c54:	82 0f       	add	r24, r18
    2c56:	93 1f       	adc	r25, r19
    2c58:	fc 01       	movw	r30, r24
    2c5a:	38 96       	adiw	r30, 0x08	; 8
    2c5c:	51 83       	std	Z+1, r21	; 0x01
    2c5e:	40 83       	st	Z, r20
    2c60:	36 c0       	rjmp	.+108    	; 0x2cce <calmuldiv+0x47c>
                break;
                case '/':
                arr[i+1]=arr[i-1]/arr[i+1];
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	88 2f       	mov	r24, r24
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	01 96       	adiw	r24, 0x01	; 1
    2c6a:	9c 01       	movw	r18, r24
    2c6c:	22 0f       	add	r18, r18
    2c6e:	33 1f       	adc	r19, r19
    2c70:	89 a9       	ldd	r24, Y+49	; 0x31
    2c72:	9a a9       	ldd	r25, Y+50	; 0x32
    2c74:	8c 01       	movw	r16, r24
    2c76:	02 0f       	add	r16, r18
    2c78:	13 1f       	adc	r17, r19
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	28 2f       	mov	r18, r24
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	82 1b       	sub	r24, r18
    2c86:	93 0b       	sbc	r25, r19
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	22 27       	eor	r18, r18
    2c8e:	33 27       	eor	r19, r19
    2c90:	28 1b       	sub	r18, r24
    2c92:	39 0b       	sbc	r19, r25
    2c94:	89 a9       	ldd	r24, Y+49	; 0x31
    2c96:	9a a9       	ldd	r25, Y+50	; 0x32
    2c98:	fc 01       	movw	r30, r24
    2c9a:	e2 0f       	add	r30, r18
    2c9c:	f3 1f       	adc	r31, r19
    2c9e:	40 81       	ld	r20, Z
    2ca0:	51 81       	ldd	r21, Z+1	; 0x01
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	88 2f       	mov	r24, r24
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	01 96       	adiw	r24, 0x01	; 1
    2caa:	9c 01       	movw	r18, r24
    2cac:	22 0f       	add	r18, r18
    2cae:	33 1f       	adc	r19, r19
    2cb0:	89 a9       	ldd	r24, Y+49	; 0x31
    2cb2:	9a a9       	ldd	r25, Y+50	; 0x32
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	e2 0f       	add	r30, r18
    2cb8:	f3 1f       	adc	r31, r19
    2cba:	20 81       	ld	r18, Z
    2cbc:	31 81       	ldd	r19, Z+1	; 0x01
    2cbe:	ca 01       	movw	r24, r20
    2cc0:	b9 01       	movw	r22, r18
    2cc2:	0e 94 06 19 	call	0x320c	; 0x320c <__divmodhi4>
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	f8 01       	movw	r30, r16
    2cca:	91 83       	std	Z+1, r25	; 0x01
    2ccc:	80 83       	st	Z, r24


        ///////////////////////////////////////
       // _delay_ms(2000);
        //LCD_Clear();
        for (u8 i = 1; i < c+1; i+=2)
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	8e 5f       	subi	r24, 0xFE	; 254
    2cd2:	89 83       	std	Y+1, r24	; 0x01
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
    2cd6:	28 2f       	mov	r18, r24
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	8f 81       	ldd	r24, Y+7	; 0x07
    2cdc:	98 85       	ldd	r25, Y+8	; 0x08
    2cde:	01 96       	adiw	r24, 0x01	; 1
    2ce0:	28 17       	cp	r18, r24
    2ce2:	39 07       	cpc	r19, r25
    2ce4:	0c f4       	brge	.+2      	; 0x2ce8 <calmuldiv+0x496>
    2ce6:	f5 ce       	rjmp	.-534    	; 0x2ad2 <calmuldiv+0x280>
                default:
                break;
            }
            /* code */
        }
        c=arr2[c];
    2ce8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cea:	98 85       	ldd	r25, Y+8	; 0x08
    2cec:	9c 01       	movw	r18, r24
    2cee:	22 0f       	add	r18, r18
    2cf0:	33 1f       	adc	r19, r19
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	01 96       	adiw	r24, 0x01	; 1
    2cf6:	82 0f       	add	r24, r18
    2cf8:	93 1f       	adc	r25, r19
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	38 96       	adiw	r30, 0x08	; 8
    2cfe:	80 81       	ld	r24, Z
    2d00:	91 81       	ldd	r25, Z+1	; 0x01
    2d02:	98 87       	std	Y+8, r25	; 0x08
    2d04:	8f 83       	std	Y+7, r24	; 0x07
        LCD_SetCursorPosition(1,0);
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <LCD_SetCursorPosition>
        LCD_DisplayNumber(c);
    2d0e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d10:	98 85       	ldd	r25, Y+8	; 0x08
    2d12:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <LCD_DisplayNumber>
    2d16:	06 c0       	rjmp	.+12     	; 0x2d24 <calmuldiv+0x4d2>
    } else{
        LCD_Clear();
    2d18:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <LCD_Clear>
        LCD_DisplayString("maths error");
    2d1c:	8a e6       	ldi	r24, 0x6A	; 106
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <LCD_DisplayString>

//    c=arr[x];
//    LCD_DisplayNumber(c);


}
    2d24:	e7 96       	adiw	r28, 0x37	; 55
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	1f 91       	pop	r17
    2d36:	0f 91       	pop	r16
    2d38:	08 95       	ret

00002d3a <calcarr>:
void calcarr(s32 arr [],u8 x)
{////////// 1111 + 2 + 3 + 5 ///////6  // 1+2*2*2*2+5*2
    2d3a:	0f 93       	push	r16
    2d3c:	1f 93       	push	r17
    2d3e:	df 93       	push	r29
    2d40:	cf 93       	push	r28
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	28 97       	sbiw	r28, 0x08	; 8
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	f8 94       	cli
    2d4c:	de bf       	out	0x3e, r29	; 62
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	cd bf       	out	0x3d, r28	; 61
    2d52:	9d 83       	std	Y+5, r25	; 0x05
    2d54:	8c 83       	std	Y+4, r24	; 0x04
    2d56:	6e 83       	std	Y+6, r22	; 0x06
	//
   /// 1 + 2 + 3
  // s32 arr[20]={1,'+',2,'+',3};
  LCD_Clear();
    2d58:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <LCD_Clear>
   //x=5;
   
   
    int c=0;
    2d5c:	1b 82       	std	Y+3, r1	; 0x03
    2d5e:	1a 82       	std	Y+2, r1	; 0x02
    for (u8 i = 1; i < x+1; i+=2)
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	89 83       	std	Y+1, r24	; 0x01
    2d64:	09 c1       	rjmp	.+530    	; 0x2f78 <calcarr+0x23e>
    {
        //LCD_DisplayNumber(arr[i]);
        switch (arr[i])
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	88 2f       	mov	r24, r24
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	9c 01       	movw	r18, r24
    2d6e:	22 0f       	add	r18, r18
    2d70:	33 1f       	adc	r19, r19
    2d72:	8c 81       	ldd	r24, Y+4	; 0x04
    2d74:	9d 81       	ldd	r25, Y+5	; 0x05
    2d76:	fc 01       	movw	r30, r24
    2d78:	e2 0f       	add	r30, r18
    2d7a:	f3 1f       	adc	r31, r19
    2d7c:	20 81       	ld	r18, Z
    2d7e:	31 81       	ldd	r19, Z+1	; 0x01
    2d80:	38 87       	std	Y+8, r19	; 0x08
    2d82:	2f 83       	std	Y+7, r18	; 0x07
    2d84:	8f 81       	ldd	r24, Y+7	; 0x07
    2d86:	98 85       	ldd	r25, Y+8	; 0x08
    2d88:	8b 32       	cpi	r24, 0x2B	; 43
    2d8a:	91 05       	cpc	r25, r1
    2d8c:	c1 f0       	breq	.+48     	; 0x2dbe <calcarr+0x84>
    2d8e:	ef 81       	ldd	r30, Y+7	; 0x07
    2d90:	f8 85       	ldd	r31, Y+8	; 0x08
    2d92:	ec 32       	cpi	r30, 0x2C	; 44
    2d94:	f1 05       	cpc	r31, r1
    2d96:	3c f4       	brge	.+14     	; 0x2da6 <calcarr+0x6c>
    2d98:	2f 81       	ldd	r18, Y+7	; 0x07
    2d9a:	38 85       	ldd	r19, Y+8	; 0x08
    2d9c:	2a 32       	cpi	r18, 0x2A	; 42
    2d9e:	31 05       	cpc	r19, r1
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <calcarr+0x6a>
    2da2:	77 c0       	rjmp	.+238    	; 0x2e92 <calcarr+0x158>
    2da4:	e6 c0       	rjmp	.+460    	; 0x2f72 <calcarr+0x238>
    2da6:	8f 81       	ldd	r24, Y+7	; 0x07
    2da8:	98 85       	ldd	r25, Y+8	; 0x08
    2daa:	8d 32       	cpi	r24, 0x2D	; 45
    2dac:	91 05       	cpc	r25, r1
    2dae:	d9 f1       	breq	.+118    	; 0x2e26 <calcarr+0xec>
    2db0:	ef 81       	ldd	r30, Y+7	; 0x07
    2db2:	f8 85       	ldd	r31, Y+8	; 0x08
    2db4:	ef 32       	cpi	r30, 0x2F	; 47
    2db6:	f1 05       	cpc	r31, r1
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <calcarr+0x82>
    2dba:	a5 c0       	rjmp	.+330    	; 0x2f06 <calcarr+0x1cc>
    2dbc:	da c0       	rjmp	.+436    	; 0x2f72 <calcarr+0x238>
        {
            case '+':
            arr[i+1]=arr[i-1]+arr[i+1];
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	88 2f       	mov	r24, r24
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	01 96       	adiw	r24, 0x01	; 1
    2dc6:	9c 01       	movw	r18, r24
    2dc8:	22 0f       	add	r18, r18
    2dca:	33 1f       	adc	r19, r19
    2dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dce:	9d 81       	ldd	r25, Y+5	; 0x05
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	a2 0f       	add	r26, r18
    2dd4:	b3 1f       	adc	r27, r19
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	28 2f       	mov	r18, r24
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	82 1b       	sub	r24, r18
    2de2:	93 0b       	sbc	r25, r19
    2de4:	88 0f       	add	r24, r24
    2de6:	99 1f       	adc	r25, r25
    2de8:	22 27       	eor	r18, r18
    2dea:	33 27       	eor	r19, r19
    2dec:	28 1b       	sub	r18, r24
    2dee:	39 0b       	sbc	r19, r25
    2df0:	8c 81       	ldd	r24, Y+4	; 0x04
    2df2:	9d 81       	ldd	r25, Y+5	; 0x05
    2df4:	fc 01       	movw	r30, r24
    2df6:	e2 0f       	add	r30, r18
    2df8:	f3 1f       	adc	r31, r19
    2dfa:	40 81       	ld	r20, Z
    2dfc:	51 81       	ldd	r21, Z+1	; 0x01
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	88 2f       	mov	r24, r24
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	01 96       	adiw	r24, 0x01	; 1
    2e06:	9c 01       	movw	r18, r24
    2e08:	22 0f       	add	r18, r18
    2e0a:	33 1f       	adc	r19, r19
    2e0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e10:	fc 01       	movw	r30, r24
    2e12:	e2 0f       	add	r30, r18
    2e14:	f3 1f       	adc	r31, r19
    2e16:	80 81       	ld	r24, Z
    2e18:	91 81       	ldd	r25, Z+1	; 0x01
    2e1a:	84 0f       	add	r24, r20
    2e1c:	95 1f       	adc	r25, r21
    2e1e:	11 96       	adiw	r26, 0x01	; 1
    2e20:	9c 93       	st	X, r25
    2e22:	8e 93       	st	-X, r24
    2e24:	a6 c0       	rjmp	.+332    	; 0x2f72 <calcarr+0x238>
            break;
            case '-':
            arr[i+1]=arr[i-1]-arr[i+1];
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	88 2f       	mov	r24, r24
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	01 96       	adiw	r24, 0x01	; 1
    2e2e:	9c 01       	movw	r18, r24
    2e30:	22 0f       	add	r18, r18
    2e32:	33 1f       	adc	r19, r19
    2e34:	8c 81       	ldd	r24, Y+4	; 0x04
    2e36:	9d 81       	ldd	r25, Y+5	; 0x05
    2e38:	dc 01       	movw	r26, r24
    2e3a:	a2 0f       	add	r26, r18
    2e3c:	b3 1f       	adc	r27, r19
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	28 2f       	mov	r18, r24
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	82 1b       	sub	r24, r18
    2e4a:	93 0b       	sbc	r25, r19
    2e4c:	88 0f       	add	r24, r24
    2e4e:	99 1f       	adc	r25, r25
    2e50:	22 27       	eor	r18, r18
    2e52:	33 27       	eor	r19, r19
    2e54:	28 1b       	sub	r18, r24
    2e56:	39 0b       	sbc	r19, r25
    2e58:	8c 81       	ldd	r24, Y+4	; 0x04
    2e5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	e2 0f       	add	r30, r18
    2e60:	f3 1f       	adc	r31, r19
    2e62:	40 81       	ld	r20, Z
    2e64:	51 81       	ldd	r21, Z+1	; 0x01
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	88 2f       	mov	r24, r24
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	01 96       	adiw	r24, 0x01	; 1
    2e6e:	9c 01       	movw	r18, r24
    2e70:	22 0f       	add	r18, r18
    2e72:	33 1f       	adc	r19, r19
    2e74:	8c 81       	ldd	r24, Y+4	; 0x04
    2e76:	9d 81       	ldd	r25, Y+5	; 0x05
    2e78:	fc 01       	movw	r30, r24
    2e7a:	e2 0f       	add	r30, r18
    2e7c:	f3 1f       	adc	r31, r19
    2e7e:	80 81       	ld	r24, Z
    2e80:	91 81       	ldd	r25, Z+1	; 0x01
    2e82:	9a 01       	movw	r18, r20
    2e84:	28 1b       	sub	r18, r24
    2e86:	39 0b       	sbc	r19, r25
    2e88:	c9 01       	movw	r24, r18
    2e8a:	11 96       	adiw	r26, 0x01	; 1
    2e8c:	9c 93       	st	X, r25
    2e8e:	8e 93       	st	-X, r24
    2e90:	70 c0       	rjmp	.+224    	; 0x2f72 <calcarr+0x238>
            break;
            case '*':
            arr[i+1]=arr[i-1]*arr[i+1];
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	88 2f       	mov	r24, r24
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	01 96       	adiw	r24, 0x01	; 1
    2e9a:	9c 01       	movw	r18, r24
    2e9c:	22 0f       	add	r18, r18
    2e9e:	33 1f       	adc	r19, r19
    2ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	a2 0f       	add	r26, r18
    2ea8:	b3 1f       	adc	r27, r19
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	28 2f       	mov	r18, r24
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	82 1b       	sub	r24, r18
    2eb6:	93 0b       	sbc	r25, r19
    2eb8:	88 0f       	add	r24, r24
    2eba:	99 1f       	adc	r25, r25
    2ebc:	22 27       	eor	r18, r18
    2ebe:	33 27       	eor	r19, r19
    2ec0:	28 1b       	sub	r18, r24
    2ec2:	39 0b       	sbc	r19, r25
    2ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec8:	fc 01       	movw	r30, r24
    2eca:	e2 0f       	add	r30, r18
    2ecc:	f3 1f       	adc	r31, r19
    2ece:	40 81       	ld	r20, Z
    2ed0:	51 81       	ldd	r21, Z+1	; 0x01
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	88 2f       	mov	r24, r24
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	01 96       	adiw	r24, 0x01	; 1
    2eda:	9c 01       	movw	r18, r24
    2edc:	22 0f       	add	r18, r18
    2ede:	33 1f       	adc	r19, r19
    2ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	e2 0f       	add	r30, r18
    2ee8:	f3 1f       	adc	r31, r19
    2eea:	80 81       	ld	r24, Z
    2eec:	91 81       	ldd	r25, Z+1	; 0x01
    2eee:	fc 01       	movw	r30, r24
    2ef0:	4e 9f       	mul	r20, r30
    2ef2:	c0 01       	movw	r24, r0
    2ef4:	4f 9f       	mul	r20, r31
    2ef6:	90 0d       	add	r25, r0
    2ef8:	5e 9f       	mul	r21, r30
    2efa:	90 0d       	add	r25, r0
    2efc:	11 24       	eor	r1, r1
    2efe:	11 96       	adiw	r26, 0x01	; 1
    2f00:	9c 93       	st	X, r25
    2f02:	8e 93       	st	-X, r24
    2f04:	36 c0       	rjmp	.+108    	; 0x2f72 <calcarr+0x238>
            break;
            case '/':
            arr[i+1]=arr[i-1]/arr[i+1];
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	88 2f       	mov	r24, r24
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	01 96       	adiw	r24, 0x01	; 1
    2f0e:	9c 01       	movw	r18, r24
    2f10:	22 0f       	add	r18, r18
    2f12:	33 1f       	adc	r19, r19
    2f14:	8c 81       	ldd	r24, Y+4	; 0x04
    2f16:	9d 81       	ldd	r25, Y+5	; 0x05
    2f18:	8c 01       	movw	r16, r24
    2f1a:	02 0f       	add	r16, r18
    2f1c:	13 1f       	adc	r17, r19
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
    2f20:	28 2f       	mov	r18, r24
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	82 1b       	sub	r24, r18
    2f2a:	93 0b       	sbc	r25, r19
    2f2c:	88 0f       	add	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	22 27       	eor	r18, r18
    2f32:	33 27       	eor	r19, r19
    2f34:	28 1b       	sub	r18, r24
    2f36:	39 0b       	sbc	r19, r25
    2f38:	8c 81       	ldd	r24, Y+4	; 0x04
    2f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f3c:	fc 01       	movw	r30, r24
    2f3e:	e2 0f       	add	r30, r18
    2f40:	f3 1f       	adc	r31, r19
    2f42:	40 81       	ld	r20, Z
    2f44:	51 81       	ldd	r21, Z+1	; 0x01
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	88 2f       	mov	r24, r24
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	01 96       	adiw	r24, 0x01	; 1
    2f4e:	9c 01       	movw	r18, r24
    2f50:	22 0f       	add	r18, r18
    2f52:	33 1f       	adc	r19, r19
    2f54:	8c 81       	ldd	r24, Y+4	; 0x04
    2f56:	9d 81       	ldd	r25, Y+5	; 0x05
    2f58:	fc 01       	movw	r30, r24
    2f5a:	e2 0f       	add	r30, r18
    2f5c:	f3 1f       	adc	r31, r19
    2f5e:	20 81       	ld	r18, Z
    2f60:	31 81       	ldd	r19, Z+1	; 0x01
    2f62:	ca 01       	movw	r24, r20
    2f64:	b9 01       	movw	r22, r18
    2f66:	0e 94 06 19 	call	0x320c	; 0x320c <__divmodhi4>
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	f8 01       	movw	r30, r16
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	80 83       	st	Z, r24
  LCD_Clear();
   //x=5;
   
   
    int c=0;
    for (u8 i = 1; i < x+1; i+=2)
    2f72:	89 81       	ldd	r24, Y+1	; 0x01
    2f74:	8e 5f       	subi	r24, 0xFE	; 254
    2f76:	89 83       	std	Y+1, r24	; 0x01
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f80:	88 2f       	mov	r24, r24
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	01 96       	adiw	r24, 0x01	; 1
    2f86:	28 17       	cp	r18, r24
    2f88:	39 07       	cpc	r19, r25
    2f8a:	0c f4       	brge	.+2      	; 0x2f8e <calcarr+0x254>
    2f8c:	ec ce       	rjmp	.-552    	; 0x2d66 <calcarr+0x2c>
            default:
            break;
        }
        /* code */
    }
    c=arr[x];
    2f8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f90:	88 2f       	mov	r24, r24
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	9c 01       	movw	r18, r24
    2f96:	22 0f       	add	r18, r18
    2f98:	33 1f       	adc	r19, r19
    2f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	e2 0f       	add	r30, r18
    2fa2:	f3 1f       	adc	r31, r19
    2fa4:	80 81       	ld	r24, Z
    2fa6:	91 81       	ldd	r25, Z+1	; 0x01
    2fa8:	9b 83       	std	Y+3, r25	; 0x03
    2faa:	8a 83       	std	Y+2, r24	; 0x02
    LCD_DisplayNumber(c);
    2fac:	8a 81       	ldd	r24, Y+2	; 0x02
    2fae:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb0:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <LCD_DisplayNumber>

    
}
    2fb4:	28 96       	adiw	r28, 0x08	; 8
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	f8 94       	cli
    2fba:	de bf       	out	0x3e, r29	; 62
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	cd bf       	out	0x3d, r28	; 61
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	1f 91       	pop	r17
    2fc6:	0f 91       	pop	r16
    2fc8:	08 95       	ret

00002fca <keybad>:
void keybad(){
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	e2 97       	sbiw	r28, 0x32	; 50
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	cd bf       	out	0x3d, r28	; 61
    LCD_Init();
    2fde:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <LCD_Init>
    Keypad_Init();
    2fe2:	0e 94 8d 0c 	call	0x191a	; 0x191a <Keypad_Init>
    Keypad_ButtonType pressed_button ;
    u8 c=0;
    2fe6:	1f 82       	std	Y+7, r1	; 0x07
    u8 cn=0;
    2fe8:	1e 82       	std	Y+6, r1	; 0x06
    s32 arr[20]={0};
    2fea:	88 e2       	ldi	r24, 0x28	; 40
    2fec:	fe 01       	movw	r30, r28
    2fee:	39 96       	adiw	r30, 0x09	; 9
    2ff0:	df 01       	movw	r26, r30
    2ff2:	28 2f       	mov	r18, r24
    2ff4:	1d 92       	st	X+, r1
    2ff6:	2a 95       	dec	r18
    2ff8:	e9 f7       	brne	.-6      	; 0x2ff4 <keybad+0x2a>
    {
        /* code */
    
    
        do{
            pressed_button= Keypad_GetPressedButton();
    2ffa:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <Keypad_GetPressedButton>
    2ffe:	88 87       	std	Y+8, r24	; 0x08
        }while (pressed_button==KEYPAD_BUTTON_INVALID);
    3000:	88 85       	ldd	r24, Y+8	; 0x08
    3002:	80 31       	cpi	r24, 0x10	; 16
    3004:	d1 f3       	breq	.-12     	; 0x2ffa <keybad+0x30>

        if (pressed_button == CALCULATOR_BUTTON_CLR) {
    3006:	88 85       	ldd	r24, Y+8	; 0x08
    3008:	88 23       	and	r24, r24
    300a:	d1 f4       	brne	.+52     	; 0x3040 <keybad+0x76>
                
                LCD_Clear();
    300c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <LCD_Clear>
                c=0;
    3010:	1f 82       	std	Y+7, r1	; 0x07
                for (u8 i = 0; i < 20; i++)
    3012:	1d 82       	std	Y+5, r1	; 0x05
    3014:	11 c0       	rjmp	.+34     	; 0x3038 <keybad+0x6e>
                {
                arr[i]=0;
    3016:	8d 81       	ldd	r24, Y+5	; 0x05
    3018:	88 2f       	mov	r24, r24
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	9c 01       	movw	r18, r24
    301e:	22 0f       	add	r18, r18
    3020:	33 1f       	adc	r19, r19
    3022:	ce 01       	movw	r24, r28
    3024:	01 96       	adiw	r24, 0x01	; 1
    3026:	82 0f       	add	r24, r18
    3028:	93 1f       	adc	r25, r19
    302a:	fc 01       	movw	r30, r24
    302c:	38 96       	adiw	r30, 0x08	; 8
    302e:	11 82       	std	Z+1, r1	; 0x01
    3030:	10 82       	st	Z, r1

        if (pressed_button == CALCULATOR_BUTTON_CLR) {
                
                LCD_Clear();
                c=0;
                for (u8 i = 0; i < 20; i++)
    3032:	8d 81       	ldd	r24, Y+5	; 0x05
    3034:	8f 5f       	subi	r24, 0xFF	; 255
    3036:	8d 83       	std	Y+5, r24	; 0x05
    3038:	8d 81       	ldd	r24, Y+5	; 0x05
    303a:	84 31       	cpi	r24, 0x14	; 20
    303c:	60 f3       	brcs	.-40     	; 0x3016 <keybad+0x4c>
    303e:	dd cf       	rjmp	.-70     	; 0x2ffa <keybad+0x30>
                arr[i]=0;
                /* code */
                }
                continue;
        }
        if(Check_IS_NOtANumber(pressed_button)){
    3040:	88 85       	ldd	r24, Y+8	; 0x08
    3042:	0e 94 c4 18 	call	0x3188	; 0x3188 <Check_IS_NOtANumber>
    3046:	88 23       	and	r24, r24
    3048:	b9 f1       	breq	.+110    	; 0x30b8 <keybad+0xee>
            s32 ss = Calculator_GetRealNumber(pressed_button);
    304a:	88 85       	ldd	r24, Y+8	; 0x08
    304c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Calculator_GetRealNumber>
    3050:	88 2f       	mov	r24, r24
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	9c 83       	std	Y+4, r25	; 0x04
    3056:	8b 83       	std	Y+3, r24	; 0x03
            LCD_DisplayNumber(ss);
    3058:	8b 81       	ldd	r24, Y+3	; 0x03
    305a:	9c 81       	ldd	r25, Y+4	; 0x04
    305c:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <LCD_DisplayNumber>
            arr[c]=arr[c]*10+ss; // 0*1+1->1   1*10+1 1 2 3         
    3060:	8f 81       	ldd	r24, Y+7	; 0x07
    3062:	68 2f       	mov	r22, r24
    3064:	70 e0       	ldi	r23, 0x00	; 0
    3066:	8f 81       	ldd	r24, Y+7	; 0x07
    3068:	88 2f       	mov	r24, r24
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	9c 01       	movw	r18, r24
    306e:	22 0f       	add	r18, r18
    3070:	33 1f       	adc	r19, r19
    3072:	ce 01       	movw	r24, r28
    3074:	01 96       	adiw	r24, 0x01	; 1
    3076:	82 0f       	add	r24, r18
    3078:	93 1f       	adc	r25, r19
    307a:	fc 01       	movw	r30, r24
    307c:	38 96       	adiw	r30, 0x08	; 8
    307e:	80 81       	ld	r24, Z
    3080:	91 81       	ldd	r25, Z+1	; 0x01
    3082:	9c 01       	movw	r18, r24
    3084:	22 0f       	add	r18, r18
    3086:	33 1f       	adc	r19, r19
    3088:	c9 01       	movw	r24, r18
    308a:	88 0f       	add	r24, r24
    308c:	99 1f       	adc	r25, r25
    308e:	88 0f       	add	r24, r24
    3090:	99 1f       	adc	r25, r25
    3092:	28 0f       	add	r18, r24
    3094:	39 1f       	adc	r19, r25
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	9c 81       	ldd	r25, Y+4	; 0x04
    309a:	a9 01       	movw	r20, r18
    309c:	48 0f       	add	r20, r24
    309e:	59 1f       	adc	r21, r25
    30a0:	9b 01       	movw	r18, r22
    30a2:	22 0f       	add	r18, r18
    30a4:	33 1f       	adc	r19, r19
    30a6:	ce 01       	movw	r24, r28
    30a8:	01 96       	adiw	r24, 0x01	; 1
    30aa:	82 0f       	add	r24, r18
    30ac:	93 1f       	adc	r25, r19
    30ae:	fc 01       	movw	r30, r24
    30b0:	38 96       	adiw	r30, 0x08	; 8
    30b2:	51 83       	std	Z+1, r21	; 0x01
    30b4:	40 83       	st	Z, r20
    30b6:	a1 cf       	rjmp	.-190    	; 0x2ffa <keybad+0x30>
            //arr[c]=ss;
        }else if(pressed_button != CALCULATOR_BUTTON_EQUAL){
    30b8:	88 85       	ldd	r24, Y+8	; 0x08
    30ba:	82 30       	cpi	r24, 0x02	; 2
    30bc:	09 f4       	brne	.+2      	; 0x30c0 <keybad+0xf6>
    30be:	47 c0       	rjmp	.+142    	; 0x314e <keybad+0x184>
            u8 operation=0;
    30c0:	1a 82       	std	Y+2, r1	; 0x02
            switch (pressed_button)
    30c2:	88 85       	ldd	r24, Y+8	; 0x08
    30c4:	a8 2f       	mov	r26, r24
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	ba ab       	std	Y+50, r27	; 0x32
    30ca:	a9 ab       	std	Y+49, r26	; 0x31
    30cc:	29 a9       	ldd	r18, Y+49	; 0x31
    30ce:	3a a9       	ldd	r19, Y+50	; 0x32
    30d0:	27 30       	cpi	r18, 0x07	; 7
    30d2:	31 05       	cpc	r19, r1
    30d4:	c9 f0       	breq	.+50     	; 0x3108 <keybad+0x13e>
    30d6:	89 a9       	ldd	r24, Y+49	; 0x31
    30d8:	9a a9       	ldd	r25, Y+50	; 0x32
    30da:	88 30       	cpi	r24, 0x08	; 8
    30dc:	91 05       	cpc	r25, r1
    30de:	34 f4       	brge	.+12     	; 0x30ec <keybad+0x122>
    30e0:	a9 a9       	ldd	r26, Y+49	; 0x31
    30e2:	ba a9       	ldd	r27, Y+50	; 0x32
    30e4:	a3 30       	cpi	r26, 0x03	; 3
    30e6:	b1 05       	cpc	r27, r1
    30e8:	61 f0       	breq	.+24     	; 0x3102 <keybad+0x138>
    30ea:	16 c0       	rjmp	.+44     	; 0x3118 <keybad+0x14e>
    30ec:	29 a9       	ldd	r18, Y+49	; 0x31
    30ee:	3a a9       	ldd	r19, Y+50	; 0x32
    30f0:	2b 30       	cpi	r18, 0x0B	; 11
    30f2:	31 05       	cpc	r19, r1
    30f4:	61 f0       	breq	.+24     	; 0x310e <keybad+0x144>
    30f6:	89 a9       	ldd	r24, Y+49	; 0x31
    30f8:	9a a9       	ldd	r25, Y+50	; 0x32
    30fa:	8f 30       	cpi	r24, 0x0F	; 15
    30fc:	91 05       	cpc	r25, r1
    30fe:	51 f0       	breq	.+20     	; 0x3114 <keybad+0x14a>
    3100:	0b c0       	rjmp	.+22     	; 0x3118 <keybad+0x14e>
            {
            case CALCULATOR_BUTTON_PLUS:
                operation = '+';
    3102:	8b e2       	ldi	r24, 0x2B	; 43
    3104:	8a 83       	std	Y+2, r24	; 0x02
    3106:	08 c0       	rjmp	.+16     	; 0x3118 <keybad+0x14e>
                break;
            case CALCULATOR_BUTTON_MINUS:
                operation = '-';
    3108:	8d e2       	ldi	r24, 0x2D	; 45
    310a:	8a 83       	std	Y+2, r24	; 0x02
    310c:	05 c0       	rjmp	.+10     	; 0x3118 <keybad+0x14e>
                break;
            case CALCULATOR_BUTTON_MUL:
                operation = '*';
    310e:	8a e2       	ldi	r24, 0x2A	; 42
    3110:	8a 83       	std	Y+2, r24	; 0x02
    3112:	02 c0       	rjmp	.+4      	; 0x3118 <keybad+0x14e>
                break;
            case CALCULATOR_BUTTON_DIV:
                operation = '/';
    3114:	8f e2       	ldi	r24, 0x2F	; 47
    3116:	8a 83       	std	Y+2, r24	; 0x02
                break;
            default:
                break;
            }
            LCD_DisplayCharacter(operation);
    3118:	8a 81       	ldd	r24, Y+2	; 0x02
    311a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <LCD_DisplayCharacter>
            cn=0;
    311e:	1e 82       	std	Y+6, r1	; 0x06
            c++;
    3120:	8f 81       	ldd	r24, Y+7	; 0x07
    3122:	8f 5f       	subi	r24, 0xFF	; 255
    3124:	8f 83       	std	Y+7, r24	; 0x07
            arr[c]=operation;
    3126:	8f 81       	ldd	r24, Y+7	; 0x07
    3128:	28 2f       	mov	r18, r24
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	8a 81       	ldd	r24, Y+2	; 0x02
    312e:	48 2f       	mov	r20, r24
    3130:	50 e0       	ldi	r21, 0x00	; 0
    3132:	22 0f       	add	r18, r18
    3134:	33 1f       	adc	r19, r19
    3136:	ce 01       	movw	r24, r28
    3138:	01 96       	adiw	r24, 0x01	; 1
    313a:	82 0f       	add	r24, r18
    313c:	93 1f       	adc	r25, r19
    313e:	fc 01       	movw	r30, r24
    3140:	38 96       	adiw	r30, 0x08	; 8
    3142:	51 83       	std	Z+1, r21	; 0x01
    3144:	40 83       	st	Z, r20
            c++;
    3146:	8f 81       	ldd	r24, Y+7	; 0x07
    3148:	8f 5f       	subi	r24, 0xFF	; 255
    314a:	8f 83       	std	Y+7, r24	; 0x07
    314c:	56 cf       	rjmp	.-340    	; 0x2ffa <keybad+0x30>
            
        } else{
            calmuldiv(arr,c);
    314e:	ce 01       	movw	r24, r28
    3150:	09 96       	adiw	r24, 0x09	; 9
    3152:	6f 81       	ldd	r22, Y+7	; 0x07
    3154:	0e 94 29 14 	call	0x2852	; 0x2852 <calmuldiv>
            c=0;
    3158:	1f 82       	std	Y+7, r1	; 0x07
            for (u8 i = 0; i < 20; i++)
    315a:	19 82       	std	Y+1, r1	; 0x01
    315c:	11 c0       	rjmp	.+34     	; 0x3180 <keybad+0x1b6>
            {
                arr[i]=0;
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	88 2f       	mov	r24, r24
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	9c 01       	movw	r18, r24
    3166:	22 0f       	add	r18, r18
    3168:	33 1f       	adc	r19, r19
    316a:	ce 01       	movw	r24, r28
    316c:	01 96       	adiw	r24, 0x01	; 1
    316e:	82 0f       	add	r24, r18
    3170:	93 1f       	adc	r25, r19
    3172:	fc 01       	movw	r30, r24
    3174:	38 96       	adiw	r30, 0x08	; 8
    3176:	11 82       	std	Z+1, r1	; 0x01
    3178:	10 82       	st	Z, r1
            c++;
            
        } else{
            calmuldiv(arr,c);
            c=0;
            for (u8 i = 0; i < 20; i++)
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	8f 5f       	subi	r24, 0xFF	; 255
    317e:	89 83       	std	Y+1, r24	; 0x01
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	84 31       	cpi	r24, 0x14	; 20
    3184:	60 f3       	brcs	.-40     	; 0x315e <keybad+0x194>
    3186:	39 cf       	rjmp	.-398    	; 0x2ffa <keybad+0x30>

00003188 <Check_IS_NOtANumber>:
    }



}
u8 Check_IS_NOtANumber (Keypad_ButtonType pressed_button ){
    3188:	df 93       	push	r29
    318a:	cf 93       	push	r28
    318c:	00 d0       	rcall	.+0      	; 0x318e <Check_IS_NOtANumber+0x6>
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
    3192:	89 83       	std	Y+1, r24	; 0x01
    if(pressed_button != CALCULATOR_BUTTON_CLR && pressed_button != CALCULATOR_BUTTON_PLUS && pressed_button !=CALCULATOR_BUTTON_MINUS && pressed_button != CALCULATOR_BUTTON_MUL && pressed_button !=CALCULATOR_BUTTON_DIV && pressed_button !=CALCULATOR_BUTTON_EQUAL)
    3194:	89 81       	ldd	r24, Y+1	; 0x01
    3196:	88 23       	and	r24, r24
    3198:	91 f0       	breq	.+36     	; 0x31be <Check_IS_NOtANumber+0x36>
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	83 30       	cpi	r24, 0x03	; 3
    319e:	79 f0       	breq	.+30     	; 0x31be <Check_IS_NOtANumber+0x36>
    31a0:	89 81       	ldd	r24, Y+1	; 0x01
    31a2:	87 30       	cpi	r24, 0x07	; 7
    31a4:	61 f0       	breq	.+24     	; 0x31be <Check_IS_NOtANumber+0x36>
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	8b 30       	cpi	r24, 0x0B	; 11
    31aa:	49 f0       	breq	.+18     	; 0x31be <Check_IS_NOtANumber+0x36>
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
    31ae:	8f 30       	cpi	r24, 0x0F	; 15
    31b0:	31 f0       	breq	.+12     	; 0x31be <Check_IS_NOtANumber+0x36>
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	82 30       	cpi	r24, 0x02	; 2
    31b6:	19 f0       	breq	.+6      	; 0x31be <Check_IS_NOtANumber+0x36>
    return 1;
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	8a 83       	std	Y+2, r24	; 0x02
    31bc:	01 c0       	rjmp	.+2      	; 0x31c0 <Check_IS_NOtANumber+0x38>
    return 0;
    31be:	1a 82       	std	Y+2, r1	; 0x02
    31c0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	cf 91       	pop	r28
    31c8:	df 91       	pop	r29
    31ca:	08 95       	ret

000031cc <__udivmodqi4>:
    31cc:	99 1b       	sub	r25, r25
    31ce:	79 e0       	ldi	r23, 0x09	; 9
    31d0:	04 c0       	rjmp	.+8      	; 0x31da <__udivmodqi4_ep>

000031d2 <__udivmodqi4_loop>:
    31d2:	99 1f       	adc	r25, r25
    31d4:	96 17       	cp	r25, r22
    31d6:	08 f0       	brcs	.+2      	; 0x31da <__udivmodqi4_ep>
    31d8:	96 1b       	sub	r25, r22

000031da <__udivmodqi4_ep>:
    31da:	88 1f       	adc	r24, r24
    31dc:	7a 95       	dec	r23
    31de:	c9 f7       	brne	.-14     	; 0x31d2 <__udivmodqi4_loop>
    31e0:	80 95       	com	r24
    31e2:	08 95       	ret

000031e4 <__udivmodhi4>:
    31e4:	aa 1b       	sub	r26, r26
    31e6:	bb 1b       	sub	r27, r27
    31e8:	51 e1       	ldi	r21, 0x11	; 17
    31ea:	07 c0       	rjmp	.+14     	; 0x31fa <__udivmodhi4_ep>

000031ec <__udivmodhi4_loop>:
    31ec:	aa 1f       	adc	r26, r26
    31ee:	bb 1f       	adc	r27, r27
    31f0:	a6 17       	cp	r26, r22
    31f2:	b7 07       	cpc	r27, r23
    31f4:	10 f0       	brcs	.+4      	; 0x31fa <__udivmodhi4_ep>
    31f6:	a6 1b       	sub	r26, r22
    31f8:	b7 0b       	sbc	r27, r23

000031fa <__udivmodhi4_ep>:
    31fa:	88 1f       	adc	r24, r24
    31fc:	99 1f       	adc	r25, r25
    31fe:	5a 95       	dec	r21
    3200:	a9 f7       	brne	.-22     	; 0x31ec <__udivmodhi4_loop>
    3202:	80 95       	com	r24
    3204:	90 95       	com	r25
    3206:	bc 01       	movw	r22, r24
    3208:	cd 01       	movw	r24, r26
    320a:	08 95       	ret

0000320c <__divmodhi4>:
    320c:	97 fb       	bst	r25, 7
    320e:	09 2e       	mov	r0, r25
    3210:	07 26       	eor	r0, r23
    3212:	0a d0       	rcall	.+20     	; 0x3228 <__divmodhi4_neg1>
    3214:	77 fd       	sbrc	r23, 7
    3216:	04 d0       	rcall	.+8      	; 0x3220 <__divmodhi4_neg2>
    3218:	e5 df       	rcall	.-54     	; 0x31e4 <__udivmodhi4>
    321a:	06 d0       	rcall	.+12     	; 0x3228 <__divmodhi4_neg1>
    321c:	00 20       	and	r0, r0
    321e:	1a f4       	brpl	.+6      	; 0x3226 <__divmodhi4_exit>

00003220 <__divmodhi4_neg2>:
    3220:	70 95       	com	r23
    3222:	61 95       	neg	r22
    3224:	7f 4f       	sbci	r23, 0xFF	; 255

00003226 <__divmodhi4_exit>:
    3226:	08 95       	ret

00003228 <__divmodhi4_neg1>:
    3228:	f6 f7       	brtc	.-4      	; 0x3226 <__divmodhi4_exit>
    322a:	90 95       	com	r25
    322c:	81 95       	neg	r24
    322e:	9f 4f       	sbci	r25, 0xFF	; 255
    3230:	08 95       	ret

00003232 <__prologue_saves__>:
    3232:	2f 92       	push	r2
    3234:	3f 92       	push	r3
    3236:	4f 92       	push	r4
    3238:	5f 92       	push	r5
    323a:	6f 92       	push	r6
    323c:	7f 92       	push	r7
    323e:	8f 92       	push	r8
    3240:	9f 92       	push	r9
    3242:	af 92       	push	r10
    3244:	bf 92       	push	r11
    3246:	cf 92       	push	r12
    3248:	df 92       	push	r13
    324a:	ef 92       	push	r14
    324c:	ff 92       	push	r15
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	ca 1b       	sub	r28, r26
    325c:	db 0b       	sbc	r29, r27
    325e:	0f b6       	in	r0, 0x3f	; 63
    3260:	f8 94       	cli
    3262:	de bf       	out	0x3e, r29	; 62
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	cd bf       	out	0x3d, r28	; 61
    3268:	09 94       	ijmp

0000326a <__epilogue_restores__>:
    326a:	2a 88       	ldd	r2, Y+18	; 0x12
    326c:	39 88       	ldd	r3, Y+17	; 0x11
    326e:	48 88       	ldd	r4, Y+16	; 0x10
    3270:	5f 84       	ldd	r5, Y+15	; 0x0f
    3272:	6e 84       	ldd	r6, Y+14	; 0x0e
    3274:	7d 84       	ldd	r7, Y+13	; 0x0d
    3276:	8c 84       	ldd	r8, Y+12	; 0x0c
    3278:	9b 84       	ldd	r9, Y+11	; 0x0b
    327a:	aa 84       	ldd	r10, Y+10	; 0x0a
    327c:	b9 84       	ldd	r11, Y+9	; 0x09
    327e:	c8 84       	ldd	r12, Y+8	; 0x08
    3280:	df 80       	ldd	r13, Y+7	; 0x07
    3282:	ee 80       	ldd	r14, Y+6	; 0x06
    3284:	fd 80       	ldd	r15, Y+5	; 0x05
    3286:	0c 81       	ldd	r16, Y+4	; 0x04
    3288:	1b 81       	ldd	r17, Y+3	; 0x03
    328a:	aa 81       	ldd	r26, Y+2	; 0x02
    328c:	b9 81       	ldd	r27, Y+1	; 0x01
    328e:	ce 0f       	add	r28, r30
    3290:	d1 1d       	adc	r29, r1
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	f8 94       	cli
    3296:	de bf       	out	0x3e, r29	; 62
    3298:	0f be       	out	0x3f, r0	; 63
    329a:	cd bf       	out	0x3d, r28	; 61
    329c:	ed 01       	movw	r28, r26
    329e:	08 95       	ret

000032a0 <_exit>:
    32a0:	f8 94       	cli

000032a2 <__stop_program>:
    32a2:	ff cf       	rjmp	.-2      	; 0x32a2 <__stop_program>
